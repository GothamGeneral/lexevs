<?xml version="1.0" encoding="UTF-8"?>

<!-- ====================================================================== -->
<!-- Ant build file (http://ant.apache.org/) for Ant 1.6.2 or above.        -->
<!-- ====================================================================== -->

<!-- ====================================================================== -->
<!-- ===================== - DO NOT EDIT THIS FILE! - ===================== -->
<!-- ====================================================================== -->
<!--                                                                        -->
<!-- Any modifications will be overwritten.                                 -->
<!--                                                                        -->
<!-- Generated by Maven Ant Plugin on 8/31/09 1:56 PM                       -->
<!-- See: http://maven.apache.org/plugins/maven-ant-plugin/                 -->
<!--                                                                        -->
<!-- ====================================================================== -->

<project name="common-build" default="publish" xmlns:ivy="antlib:org.apache.ivy.ant" basedir=".">

  <!-- ====================================================================== -->
  <!-- Build environment properties                                           -->
  <!-- ====================================================================== -->
	
  <property name="module.name" value=""/>
  <property name="build.version" value=""/>
  <property name="build.dir" value="target"/>
  <property name="build.outputDir" value="${build.dir}/classes"/>
  <property name="build.srcDir" value="src/main/java"/>
  <property name="build.resourceDir" value="src/main/resources"/>
  <property name="build.testOutputDir" value="${build.dir}/test-classes"/>
  <property name="build.testDir" value="src/test/java"/>
  <property name="build.testResourceDir" value="src/test/resources"/>
  <property name="test.reports" value="${build.dir}/test-reports"/>
  <property name="reporting.outputDirectory" value="${build.dir}/site"/>
  <property name="settings.offline" value="false"/>
  <property name="settings.interactiveMode" value="true"/>
  <property name="lib.dir" value="lib"/>

    <!-- ******************************************************************* -->
    <!-- ** IVY TARGETS AND DEPENDENCY PATHS                              ** -->
    <!-- ******************************************************************* -->
	<path id="compile.classpath">
		<fileset dir="${lib.dir}/compile">
		        <include name="*.jar"/>
		 </fileset>
	</path>

	<property name="ivy.jar" location="${lbPackager.dir}/ivy/lib/ivy-2.1.0-rc1.jar" />

    <property name="ivy.settings.file" location="${lbPackager.dir}/ivysettings.xml" />
    <property name="ivy.def.file" location="ivy.xml" />

    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${ivy.jar}" />

    <target name="ivy:init" depends="ivy:clean">
        <property name="ivy.dep.file" value="${ivy.def.file}"/>
        <ivy:settings file="${ivy.settings.file}"  />
    </target>
    
    <target name="ivy:clean" depends="clean:dependencies" description="Clean">
        <ivy:settings file="${ivy.settings.file}" />
    </target>
    
    <target name="clean:dependencies">
        <delete dir="${genepattern-service.jar.compile.lib.dir}" />
    	<delete dir="${lib.dir}" />
    </target>

    <target name="ivy:setup" depends="ivy:setup-compile" 
        description="Updates the local ivy repository for all build and test dependencies."/>

    <target name="ivy:setup-compile" depends="ivy:init">
        <ivy:resolve refresh="true" conf="compile" />
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="compile" />
    	<copy todir="${lib.dir}/compile" failonerror="false">
    		<fileset dir="${extra.lib}"
    			includes="*.jar"/>
    	</copy>
    </target>


  <!-- ====================================================================== -->
  <!-- Cleaning up target                                                     -->
  <!-- ====================================================================== -->

  <target name="clean" description="Clean the output directory">
    <delete dir="${build.dir}"/>
  </target>

  <!-- ====================================================================== -->
  <!-- Compilation target                                                     -->
  <!-- ====================================================================== -->

  <target name="compile" depends="ivy:setup-compile, clean" description="Compile the code">
    <mkdir dir="${build.outputDir}"/>
    <javac destdir="${build.outputDir}" 
           nowarn="false" 
           debug="true" 
           optimize="false" 
           deprecation="true" 
           target="1.6" 
           verbose="false" 
           fork="false" 
           source="1.6">
      <src>
        <pathelement location="${build.srcDir}"/>
      </src>
      <classpath refid="compile.classpath"/>
    </javac>
    <copy todir="${build.outputDir}" failonerror="false">
      <fileset dir="${build.resourceDir}"/>
    </copy>
  </target>

  <!-- ====================================================================== -->
  <!-- Test-compilation target                                                -->
  <!-- ====================================================================== -->

  <target name="compile-tests" 
          depends="compile" 
          description="Compile the test code" 
          unless="test.skip">
    <mkdir dir="${build.testOutputDir}"/>
    <javac destdir="${build.testOutputDir}" 
           nowarn="false" 
           debug="true" 
           optimize="false" 
           deprecation="true" 
           target="1.6" 
           verbose="false" 
           fork="false" 
           source="1.6">
      <src>
        <pathelement location="${build.testDir}"/>
      </src>
      <classpath>
        <path refid="compile.classpath"/>
        <pathelement location="${build.outputDir}"/>
      </classpath>
    </javac>
  	<mkdir dir="${build.testOutputDir}"/>
    <copy todir="${build.testOutputDir}" failonerror="false">
      <fileset dir="${build.testResourceDir}"/>
    </copy>
  </target>

  <!-- ====================================================================== -->
  <!-- Run all tests                                                          -->
  <!-- ====================================================================== -->
  <target name="test" 
          depends="compile-tests"
  		  unless="test.skip"
          description="Run the test cases">
    <mkdir dir="${test.reports}"/>
    <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir=".">
      <sysproperty key="basedir" value="."/>
      <formatter type="xml"/>
      <formatter type="plain" usefile="false"/>
      <classpath>
        <path refid="compile.classpath"/>
        <pathelement location="${build.outputDir}"/>
        <pathelement location="${build.testOutputDir}"/>
      </classpath>
      <batchtest todir="${test.reports}" unless="test">
        <fileset dir="${build.testDir}">
          <include name="**/Test*.java"/>
          <include name="**/*Test.java"/>
          <include name="**/*TestCase.java"/>
          <exclude name="**/*Abstract*Test.java"/>
        </fileset>
      </batchtest>
      <batchtest todir="${test.reports}" if="test">
        <fileset dir="${build.testDir}">
          <include name="**/${test}.java"/>
          <exclude name="**/*Abstract*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  	
  	<jar jarfile="${build.dir}/${module.name}-test.jar" 
  			  	         compress="true" 
  			  	         index="false" 
  			  	         basedir="${build.testOutputDir}" 
  			  	         excludes="**/package.html"/>
  </target>

  <target name="test-junit-present">
    <available classname="junit.framework.Test" property="junit.present"/>
  </target>

  <target name="test-junit-status" 
          depends="test-junit-present">
    <condition property="junit.missing">
      <and>
        <isfalse value="${junit.present}"/>
        <isfalse value="${test.skip}"/>
      </and>
    </condition>
    <condition property="junit.skipped">
      <or>
        <isfalse value="${junit.present}"/>
        <istrue value="${test.skip}"/>
      </or>
    </condition>
  </target>

  <target name="junit-missing" 
          depends="test-junit-status" 
          if="junit.missing">
    <echo>=================================== WARNING ===================================</echo>
    <echo> JUnit is not present in your $ANT_HOME/lib directory. Tests not executed.</echo>
    <echo>===============================================================================</echo>
  </target>

  <!-- ====================================================================== -->
  <!-- Javadoc target                                                         -->
  <!-- ====================================================================== -->

  <target name="javadoc" description="Generates the Javadoc of the application">
    <javadoc sourcepath="${build.srcDir}" 
             packagenames="*" 
             destdir="${reporting.outputDirectory}/apidocs" 
             access="protected" 
             old="false" 
             verbose="false" 
             version="true" 
             use="true" 
             author="true" 
             splitindex="false" 
             nodeprecated="false" 
             nodeprecatedlist="false" 
             notree="false" 
             noindex="false" 
             nohelp="false" 
             nonavbar="false" 
             serialwarn="false" 
             charset="ISO-8859-1" 
             linksource="false" 
             breakiterator="false"/>
  </target>

  <!-- ====================================================================== -->
  <!-- Package target                                                         -->
  <!-- ====================================================================== -->

  <target name="package" depends="compile, test" description="Package the application">
    <jar jarfile="${build.dir}/${ivy.module}.jar" 
         compress="true" 
         index="false" 
         basedir="${build.outputDir}" 
         excludes="**/package.html"/>
    <jar jarfile="${build.dir}/${ivy.module}-sources.jar" 
         compress="true" 
         index="false" 
         basedir="${build.srcDir}" 
         excludes="**/package.html"/>
  </target>

  <!-- ====================================================================== -->
  <!-- A dummy target for the package named after the type it creates         -->
  <!-- ====================================================================== -->

  <target name="jar" depends="package" description="Builds the jar for the application"/>

  <!-- ====================================================================== -->
  <!-- Download dependencies target                                           -->
  <!-- ====================================================================== -->

  <target name="test-offline">
    <condition property="mode.offline">
      <equals arg1="${settings.offline}" arg2="true"/>
    </condition>
  </target>
	
   <target name="publish" depends="jar" unless="publish.skip">
   	<ivy:makepom ivyfile="ivy.xml" pomfile="target/${ivy.module}.pom">
   		<mapping conf="*" scope="compile"/>
   	</ivy:makepom>
	<ivy:publish resolver="nci-chain" overwrite="true">
	   <artifacts pattern="target/[artifact].[ext]" />
	</ivy:publish>
	</target>

	
</project>
