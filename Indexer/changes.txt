Lucene Indexer Wrapper
*** Changes on 01/31/07
* Fixed a bug in the metadata class that was causing metadata to get lost in certain multithreaded
  applications.

*** Changes on 11/2/06
* Removed the dependencies on the old properties loading code.
 
*** Changes on 9/26/06
* Added a Snowball Filter / Analyzer (new stemming algorithm)

*** Changes on 9/18/06
* Fixed a threading problem in the metadata read/write file.

*** Changes on 8/30/06
* added a method to the metadata api.

*** Changes on 8/7/06
* replaced the phonetix library with apache commons codec.

*** Changes on 5/27/06
* Tweaked the WriteLockManager for the metadata file.

*** Changes on 5/22/06
* Added a new Analyzer for splitting on a given string.

*** Changes on 5/31/06
* Upgraded to Lucene 2.0.

*** Changes on 5/23/06
* Minor tweak to allow closing of resources / file lockes.

*** Changes on 4/26/06
* Changes to the MetaData read / write utilities to prevent data loss if multiple jvms try to 
  access it at the same time.

*** Changes on 4/5/06
* Added access to the MaxBufferedDocs variable.
* Updated to a daily build of lucene to fix a bug in the document ordering when merging indexes.

*** Changes on 4/4/06
* Made the MetaData reading and writing thread safe across multiple JVMs.

*** Changes on 3/24/06
* Refactored package into edu.mayo.informatics.indexer
* Changed license to Eclipse Public License

*** Changes on 3/6/06
* Updated to Lucene 1.9.1
* Cleaned up compile warnings, updated code to remove reference to all deprecated lucene methods.

*** Changes on 2/13/06
* Additional method in the metadata utility.
* Gave access to optimize

*** Changes on 2/9/06
* Added a reread method to the metadata stuff - cleaned up some exception handling.
* Added a reread method to the entire index api.

*** Changes on 1/30/06
* Updated mirUtility - property file locator stuff.

*** Changes on 1/26/06
* Added two new API methods - one to force the unlock of an index, and one to return the root 
  location of the service.

*** Changes on 12/17/05
* Moved to Subversion source control.
* Added IDFNeutralSimilarity to the package.
* Added accessors to get a LuceneIndexReader, and added a method to fetch a document for a position.
* Searches with a maxToReturn set to 0 will now return all results, instead of none.


*** Changes on 10/07/05
* Added a Phonetix Analyzer - supports Double Metaphone, Metaphone and SoundEx indexing.
* Reorganized jar files.
* Upgraded to lvg 2005.

*** Changes on 8/24/05
* Added many more JUnit Tests
* Changed the default characters for removal and tokenizing
* Added utilities to the QueryGenerator for removing/tokenizing on the same characters as the
WhiteSpaceLowerCase analyzer does.
* Added the ability to set custom white space characters (in addition to custom removal characters)


*** Changes on 8/22/05
* Refactored the custom analyzers and filters into new locations.
* Rewrote and simplified the norm filter.
* Added feature for removing characters in the WhiteSpaceLowerCase filter.
* Added JUnit tests.
** Upgraded to 1.9 alpha release of Lucene - built from source today **
* The upgrade of lucene fixes a bug when trying to construct a query with the NormAnalyzer - it now handles the
  Leaves -> leaf, leave 
  case correctly


Changes on 8/8/05
Added a new analyzer.
Added the ability to set stop words on the norm analyzer.

Changes on 7/26/05
Fixed the IndexService to throw an exception instead of a null pointer if an index is reqested that doesn't exist.
Updated JDom to 1.0.

Changes on 6/14/05
Updated to 1.4.3 of Lucene.
Updated MIRUtility - better properties file locator
Added a FieldSkippingAnalyzer


Changes on 10/19/04
Added a LRU cache to the norm calls.
Updated to 1.4.2 of Lucene.

Changes on 8/31/04
Updated to 1.4.1 of Lucene.

Changes on 7/20/04

Upgraded to 1.4 final of Lucene (from 1.3)
Updated the api to expose new features of lucene
- can now set analyzers per field when adding documents
- now can do a parallel search across multiple indexes (instead of a serial search) (this requires changes 
to your code - the api for searching multiple indexes now has a new boolean parameter)
- now uses the compound file format by default which results in slightly longer indexing times, but
is much less likely to run into file handle problems while indexing.
- Fixed the norm analyzer to have the same stop words as the standard analyzer.

