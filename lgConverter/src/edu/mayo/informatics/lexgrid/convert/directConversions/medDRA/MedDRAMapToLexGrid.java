package edu.mayo.informatics.lexgrid.convert.directConversions.medDRA;import java.io.FileNotFoundException;import java.io.FileReader;import java.lang.reflect.Field;import java.net.URI;import java.util.List;import org.LexGrid.LexBIG.Utility.logging.LgMessageDirectorIF;import org.LexGrid.codingSchemes.CodingScheme;import org.LexGrid.commonTypes.EntityDescription;import org.LexGrid.commonTypes.Text;import org.LexGrid.naming.Mappings;import org.lexevs.logging.messaging.impl.CachingMessageDirectorImpl;import au.com.bytecode.opencsv.CSVReader;import au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategy;import au.com.bytecode.opencsv.bean.CsvToBean;public class MedDRAMapToLexGrid {    private LgMessageDirectorIF messages_;    private URI medDRASourceDir;    private Database meddraDatabase;        public MedDRAMapToLexGrid(URI inFileName, LgMessageDirectorIF lg_messages) {        this.messages_ = new CachingMessageDirectorImpl(lg_messages);        this.medDRASourceDir = inFileName;        meddraDatabase = new Database();    }    public void readMedDRAFiles() {        try{            this.createDatabase();        } catch (Exception e) {            messages_.error("Failed to read MedDRA data files, check connection values");            e.printStackTrace();        }    }        public void mapToLexGrid(CodingScheme csclass){        try {            loadCodingScheme(csclass);//            loadAssociationEntityAndSupportedMaps(csclass);//             loadConcepts(csclass);//            loadPresentations();//            loadDefinitions();//            loadConceptProperties();//             loadRelations(csclass, internalIdToEntityHash);        } catch (Exception e) {            messages_.error("Failed to connect to RIM Database, check connection values");            e.printStackTrace();        }            }    private void loadConceptProperties() {    }    private void loadDefinitions() {        // TODO Auto-generated method stub            }    private void loadPresentations() {        // TODO Auto-generated method stub            }    private void loadConcepts(CodingScheme csclass) {        // TODO Auto-generated method stub            }    private void loadAssociationEntityAndSupportedMaps(CodingScheme csclass) {        // TODO Auto-generated method stub            }    private void loadCodingScheme(CodingScheme csclass) {        try {            messages_.info("Loading coding scheme information");            // Determine which bean contains coding scheme info            String name = "some name";            csclass.setCodingSchemeName(name);            csclass.setCodingSchemeURI(MedDRA2LGConstants.DEFAULT_URN);            csclass.setFormalName("some formal name");            EntityDescription enDesc = new EntityDescription();            enDesc.setContent("some entity description");            csclass.setEntityDescription(enDesc);            csclass.setDefaultLanguage(MedDRA2LGConstants.DEFAULT_LANGUAGE_EN);            String version = "Some version number";            csclass.setRepresentsVersion(version);                        Text txt = new Text();            txt.setContent("copyrightNotice goes here");            csclass.setCopyright(txt);            csclass.setMappings(new Mappings());               } catch (Exception e) {            messages_.error("Failed while preparing MedDRA Coding Scheme Class", e);            e.printStackTrace();        }     }    @SuppressWarnings("unchecked")    public Database createDatabase(){        String input;                for(int i=0; i < MedDRA2LGConstants.medDRADataFiles.length; i++){            input = medDRASourceDir.getPath() + MedDRA2LGConstants.medDRADataFiles[i];            try {                FileReader fileReader = new FileReader(input);                CSVReader reader = new CSVReader(fileReader, '$');                ColumnPositionMappingStrategy<DatabaseRecord> strat = new ColumnPositionMappingStrategy<DatabaseRecord>();                strat.setType(MedDRA2LGConstants.medDRAClasses[i]);                String[] columns = getFields(MedDRA2LGConstants.medDRAClasses[i]);                             strat.setColumnMapping(columns);                    CsvToBean<DatabaseRecord> csv = new CsvToBean<DatabaseRecord>();                List<DatabaseRecord> list = csv.parse(strat, reader);                meddraDatabase.add(MedDRA2LGConstants.medDRAClasses[i].getName(), list);            } catch (FileNotFoundException e) {                e.printStackTrace();            }        }                return meddraDatabase;    }    @SuppressWarnings("rawtypes")    private String[] getFields(Class class1) {        Field [] fields = class1.getDeclaredFields();           String [] fieldnames = new String[fields.length - 1];                for(int i=1; i < fields.length; i++){            fieldnames[i-1] = fields[i].getName();        }        return fieldnames;    }}