--   -------------------------------------------------- 
--   Generated by Enterprise Architect Version 7.5.850
--   Created On : Friday, 28 May, 2010 
--   DBMS       : Oracle 
--   -------------------------------------------------- 




--  Create Tables 
CREATE TABLE @PREFIX@associationPredicate
(
	associationPredicateGuid  VARCHAR2(36) NOT NULL,    --  Global unique identifier for a given associationPredicate. 
	relationGuid              VARCHAR2(36) NOT NULL,    --  Foreign key to the corresponding relation container. 
	associationName           VARCHAR2(100) NOT NULL    --  The local identifier of the relation itself.  associationName must match a local id of a supportedAssociationName in the corresponding mappings section. 
)
;


CREATE TABLE @PREFIX@codingScheme
(
	codingSchemeGuid   VARCHAR2(36) NOT NULL,    --  Global unique identifier for codingScheme entries. 
	codingSchemeName   VARCHAR2(50) NOT NULL,    --  The local identifier used to uniquely reference a coding scheme within the context of a message or container. codingSchemeName must match a local id of a supportedCodingScheme in the mappings table. 
	codingSchemeURI    VARCHAR2(250) NOT NULL,    --  The official URI for a coding scheme. This URI must also be present in the supportedCodingScheme entry that matches the codingSchemeName. 
	representsVersion  VARCHAR2(50),    --  The specific version of the resource represented by this coding scheme. 
	formalName         VARCHAR2(250),    --  The official or common name by which a coding scheme is known. (optional) 
	defaultLanguage    VARCHAR2(32),    --  The local identifier of the language that is used in all presentations, descriptions, etc. in this coding scheme if not otherwise specified. defaultLanguage must match a local id of a supportedLanguage in the mappings table. 
	approxNumConcepts  NUMBER(18),    --  The approximate number of entries in the lexical portion of this scheme. This is used as a hint for browsers and services. (optional) 
	description        CLOB,    --  Description of the content of the coding scheme. 
	copyright          CLOB,    --  Information about rights held in and over the resource. Typically, copyright information includes a statement about various property rights associated with the resource, including intellectual property rights. (optional) 
	isActive           CHAR(1) DEFAULT 1,    --  Boolean value to indicate the given coding scheme is active or not. 
	owner              VARCHAR2(250),    --  The owner of the resource. The specific semantics of owner is defined by the busniess rules of the implementor, including the rules of the owner field is absent. 
	status             VARCHAR2(50),    --  The status code associated with the particular resource. The semantics and business rules of entryStatus are defined by the containing system, but there needs to be a mapping into isActive above. 
	effectiveDate      TIMESTAMP,    --  The date and time that this resource is considered to be active.  To be considered active, isActive must be true, and the temporal context of the operation must be greater than effectiveDate.  If omitted, all temporal contexts are considered to be valid. 
	expirationDate     TIMESTAMP,    --  The date and time that this resource is considered to become inActive.  To be considered active, isActive must be true, and the temporal context of the operation must be less than expirationDate.  If omitted, all temporal contexts are considered to be valid. 
	releaseGuid        VARCHAR2(36),    --  Guid of the system release in which the given coding scheme is loaded. This field is a nullable field as a coding scheme can be loaded alone, with out a system release. 
	entryStateGuid     VARCHAR2(36)    --  Holds the reference to the entry state details of the coding scheme. 
)
;


CREATE TABLE @PREFIX@csMultiAttrib
(
	csMultiAttribGuid  VARCHAR2(36) NOT NULL,    --  Global unique identifiers for codingScheme multi attribute entries. 
	codingSchemeGuid   VARCHAR2(36) NOT NULL,    --  Foreign key to the corresponding codingScheme. 
	attributeType      VARCHAR2(30) NOT NULL,    --  Type of the multi attribute stored. Typically "localName" or "source". 
	attributeValue     VARCHAR2(250) NOT NULL,    --  Value of the multi attributes. 
	subRef             VARCHAR2(250),    --  The page, subheading, id or other localized information within the source. Used to make a source reference more precise.  
	role               VARCHAR2(250),    --  The role or purpose of the source for this particular resource (e.g. author, distributor). 
	entryStateGuid     VARCHAR2(36)    --  Holds the reference to the entry state details. 
)
;


CREATE TABLE @PREFIX@csSupportedAttrib
(
	csSuppAttribGuid        VARCHAR2(36) NOT NULL,     
	codingSchemeGuid        VARCHAR2(36) NOT NULL,     
	supportedAttributeTag   VARCHAR2(30) NOT NULL,     
	id                      VARCHAR2(250) NOT NULL,     
	uri                     VARCHAR2(250),     
	idValue                 VARCHAR2(250),     
	associationNames        VARCHAR(250),     
	rootCode                VARCHAR2(250),    
	isForwardNavigable      CHAR(1),     
	isImported              CHAR(1),     
	equivalentCodingScheme  VARCHAR2(250),  
	assemblyRule            VARCHAR2(250),  
	assnCodingScheme        VARCHAR(250),   
	assnNamespace           VARCHAR(250),   
	assnEntityCode          VARCHAR(200),   
	propertyType            VARCHAR(50)     
)
;


CREATE TABLE @PREFIX@entity
(
	entityGuid           VARCHAR2(36) NOT NULL,     
	codingSchemeGuid     VARCHAR2(36) NOT NULL,     
	entityCode           VARCHAR2(200) NOT NULL,    
	entityCodeNamespace  VARCHAR2(50) NOT NULL,     
	isDefined            CHAR(1),  
	isAnonymous          CHAR(1),  
	description          CLOB,     
	isActive             CHAR(1) DEFAULT 1,    
	owner                VARCHAR2(250),     
	status               VARCHAR2(50),    
	effectiveDate        TIMESTAMP,     
	expirationDate       TIMESTAMP,    
	entryStateGuid       VARCHAR2(36),   
	forwardName          VARCHAR2(250),   
	reverseName          VARCHAR2(250),   
	isTransitive         CHAR(1),
	isNavigable          CHAR(1)
)
;


CREATE TABLE @PREFIX@entityAssnQuals
(
	entityAssnQualsGuid  VARCHAR2(36) NOT NULL,  
	referenceGuid        VARCHAR2(36) NOT NULL,  
	qualifierName        VARCHAR2(50) NOT NULL,  
	qualifierValue       VARCHAR2(250),     
	entryStateGuid       VARCHAR2(36)
)
;


CREATE TABLE @PREFIX@entityAssnsToData
(
	entityAssnsDataGuid        VARCHAR2(36) NOT NULL,  
	associationPredicateGuid   VARCHAR2(36) NOT NULL,  
	sourceEntityCode           VARCHAR2(200) NOT NULL,  
	sourceEntityCodeNamespace  VARCHAR2(50) NOT NULL,   
	associationInstanceId      VARCHAR2(50),   
	isDefining                 CHAR(1),   
	isInferred                 CHAR(1),   
	dataValue                  CLOB,     
	isActive                   CHAR(1),  
	owner                      VARCHAR2(250),  
	status                     VARCHAR2(50),  
	effectiveDate              TIMESTAMP,    
	expirationDate             TIMESTAMP,   
	entryStateGuid             VARCHAR2(36)  
)
;


CREATE TABLE @PREFIX@entityAssnsToEntity
(
	entityAssnsGuid            VARCHAR2(36) NOT NULL,  
	associationPredicateGuid   VARCHAR2(36) NOT NULL,  
	sourceEntityCode           VARCHAR2(200) NOT NULL, 
	sourceEntityCodeNamespace  VARCHAR2(50) NOT NULL,   
	targetEntityCode           VARCHAR2(200) NOT NULL,   
	targetEntityCodeNamespace  VARCHAR2(50) NOT NULL,    
	associationInstanceId      VARCHAR2(50),   
	isDefining                 CHAR(1),   
	isInferred                 CHAR(1),   
	isActive                   CHAR(1),   
	owner                      VARCHAR2(250), 
	status                     VARCHAR2(50),  
	effectiveDate              TIMESTAMP,    
	expirationDate             TIMESTAMP,   
	entryStateGuid             VARCHAR2(36)  
)
;


CREATE TABLE @PREFIX@entityAssnsToEntityTr
(
	entityAssnsTrGuid          VARCHAR2(36) NOT NULL,  
	associationPredicateGuid   VARCHAR2(36) NOT NULL,  
	sourceEntityCode           VARCHAR2(200) NOT NULL, 
	sourceEntityCodeNamespace  VARCHAR2(50) NOT NULL,  
	targetEntityCode           VARCHAR2(200) NOT NULL,  
	targetEntityCodeNamespace  VARCHAR2(50) NOT NULL    
)
;


CREATE TABLE @PREFIX@entityType
(
	entityGuid  VARCHAR2(36) NOT NULL, 
	entityType  VARCHAR2(50) NOT NULL  
)
;


CREATE TABLE @PREFIX@entryState
(
	entryStateGuid      VARCHAR2(36) NOT NULL, 
	entryGuid           VARCHAR2(36) NOT NULL,  
	entryType           VARCHAR2(50) NOT NULL, 
	changeType          VARCHAR2(15) NOT NULL, 
	relativeOrder       NUMBER(18) NOT NULL,   
	revisionGuid        VARCHAR2(36),   
	prevRevisionGuid    VARCHAR2(36),   
	prevEntryStateGuid  VARCHAR2(36)    
)
;


CREATE TABLE @PREFIX@property
(
	propertyGuid          VARCHAR2(36) NOT NULL, 
	referenceGuid         VARCHAR2(36) NOT NULL, 
	referenceType         VARCHAR2(50) NOT NULL, 
	propertyId            VARCHAR2(50),  
	propertyType          VARCHAR2(15),  
	propertyName          VARCHAR2(250) NOT NULL,  
	language              VARCHAR2(32),   
	format                VARCHAR2(50),   
	isPreferred           CHAR(1),    
	matchIfNoContext      CHAR(1),    
	degreeOfFidelity      VARCHAR2(50), 
	representationalForm  VARCHAR2(50), 
	propertyValue         CLOB NOT NULL,  
	isActive              CHAR(1) DEFAULT 1,  
	owner                 VARCHAR2(250),  
	status                VARCHAR2(50), 
	effectiveDate         TIMESTAMP,   
	expirationDate        TIMESTAMP,  
	entryStateGuid        VARCHAR2(36)  
)
;


CREATE TABLE @PREFIX@propertyLinks
(
	propertyLinksGuid   VARCHAR2(36) NOT NULL,  
	entityGuid          VARCHAR2(36) NOT NULL,
	sourcePropertyGuid  VARCHAR2(36) NOT NULL,  
	link                VARCHAR2(250) NOT NULL, 
	targetPropertyGuid  VARCHAR2(36) NOT NULL,  
	entryStateGuid      VARCHAR2(36)
)
;


CREATE TABLE @PREFIX@propertyMultiAttrib
(
	propMultiAttribGuid  VARCHAR2(36) NOT NULL,  
	propertyGuid         VARCHAR2(36) NOT NULL,  
	attributeType        VARCHAR2(30) NOT NULL,  
	attributeId          VARCHAR2(50),     
	attributeValue       VARCHAR2(250),  
	subRef               VARCHAR2(250),   
	role                 VARCHAR2(250),  
	qualifierType        VARCHAR2(250),  
	entryStateGuid       VARCHAR2(36)    
)
;


CREATE TABLE @PREFIX@relation
(
	relationGuid               VARCHAR2(36) NOT NULL, 
	codingSchemeGuid           VARCHAR2(36) NOT NULL, 
	containerName              VARCHAR2(50) NOT NULL, 
	isMapping                  CHAR(1),     
	representsVersion          VARCHAR2(50),
	sourceCodingScheme         VARCHAR2(50),  
	sourceCodingSchemeVersion  VARCHAR2(50),  
	targetCodingScheme         VARCHAR2(50),  
	targetCodingSchemeVersion  VARCHAR2(50),  
	description                CLOB,    
	isActive                   CHAR(1), 
	owner                      VARCHAR2(250),  
	status                     VARCHAR2(50),   
	effectiveDate              TIMESTAMP,    
	expirationDate             TIMESTAMP,   
	entryStateGuid             VARCHAR2(36) 
)
;


CREATE TABLE @PREFIX@revision
(
	revisionGuid        VARCHAR2(36) NOT NULL, 
	releaseGuid         VARCHAR2(36),    
	revisionId          VARCHAR2(50) NOT NULL,   
	changeAgent         VARCHAR2(50),    
	revisionDate        TIMESTAMP,     
	revAppliedDate      TIMESTAMP NOT NULL, 
	editOrder           NUMBER(18),      
	changeInstructions  CLOB,     
	description         CLOB     
)
;


CREATE TABLE @PREFIX@systemRelease
(
	releaseGuid     VARCHAR2(36) NOT NULL, 
	releaseURI      VARCHAR2(250) NOT NULL, 
	releaseId       VARCHAR2(50),     
	releaseDate     TIMESTAMP NOT NULL,  
	basedOnRelease  VARCHAR2(250),     
	releaseAgency   VARCHAR2(250),     
	description     CLOB     
)
;

COMMENT ON TABLE @PREFIX@systemRelease IS 'Table holds the information about the different releases applied to the lexGrid system (if any). A collection of coding schemes, value domains, pick lists and/or revision records that are released as a unit. This table is common across database. It doesn''t inherit the table prefixes.'
;
COMMENT ON COLUMN @PREFIX@systemRelease.releaseGuid     IS 'Global unique identifier for systemRelease table.'
;
COMMENT ON COLUMN @PREFIX@systemRelease.releaseURI      IS 'The official URI of a given systemRelease.'
;
COMMENT ON COLUMN @PREFIX@systemRelease.releaseId       IS 'The label assigned to a given  release by the release agency.'
;
COMMENT ON COLUMN @PREFIX@systemRelease.releaseDate     IS 'The official release data and time of a given release.'
;
COMMENT ON COLUMN @PREFIX@systemRelease.basedOnRelease  IS 'The URI of the release that logically preceeds this release.'
;
COMMENT ON COLUMN @PREFIX@systemRelease.releaseAgency   IS 'The URI of the agency responsible for this release.'
;
COMMENT ON COLUMN @PREFIX@systemRelease.description     IS 'Description of the release contents.'
;


--  Create Primary Key Constraints 
ALTER TABLE @PREFIX@associationPredicate ADD CONSTRAINT PK_associationPredicate 
	PRIMARY KEY (associationPredicateGuid)
;

ALTER TABLE @PREFIX@codingScheme ADD CONSTRAINT PK_codingScheme 
	PRIMARY KEY (codingSchemeGuid)
;

ALTER TABLE @PREFIX@csMultiAttrib ADD CONSTRAINT PK_csMultiAttribGuid 
	PRIMARY KEY (csMultiAttribGuid)
;

ALTER TABLE @PREFIX@csSupportedAttrib ADD CONSTRAINT PK_mappingGuid 
	PRIMARY KEY (csSuppAttribGuid)
;

ALTER TABLE @PREFIX@entity ADD CONSTRAINT PK_entity 
	PRIMARY KEY (entityGuid)
;

ALTER TABLE @PREFIX@entityAssnQuals ADD CONSTRAINT PK_entityAssnQuals 
	PRIMARY KEY (entityAssnQualsGuid)
;

ALTER TABLE @PREFIX@entityAssnsToData ADD CONSTRAINT PK_entityAssnsToData 
	PRIMARY KEY (entityAssnsDataGuid)
;

ALTER TABLE @PREFIX@entityAssnsToEntity ADD CONSTRAINT PK_entityAssnsToEntity 
	PRIMARY KEY (entityAssnsGuid)
;

ALTER TABLE @PREFIX@entityAssnsToEntityTr ADD CONSTRAINT PK_entityAssnsToEntityTr 
	PRIMARY KEY (entityAssnsTrGuid)
;

ALTER TABLE @PREFIX@entryState ADD CONSTRAINT PK_entryState 
	PRIMARY KEY (entryStateGuid)
;

ALTER TABLE @PREFIX@property ADD CONSTRAINT PK_property 
	PRIMARY KEY (propertyGuid)
;

ALTER TABLE @PREFIX@propertyLinks ADD CONSTRAINT PK_propertyLinksGuid 
	PRIMARY KEY (propertyLinksGuid)
;

ALTER TABLE @PREFIX@propertyMultiAttrib ADD CONSTRAINT PK_propMultiAttribGuid 
	PRIMARY KEY (propMultiAttribGuid)
;

ALTER TABLE @PREFIX@relation ADD CONSTRAINT PK_relation 
	PRIMARY KEY (relationGuid)
;

ALTER TABLE @PREFIX@revision ADD CONSTRAINT PK_revision 
	PRIMARY KEY (revisionGuid)
;

ALTER TABLE @PREFIX@systemRelease ADD CONSTRAINT PK_systemRelease 
	PRIMARY KEY (releaseGuid)
;


--  Create Indexes 
ALTER TABLE @PREFIX@associationPredicate
	ADD CONSTRAINT UQ_association UNIQUE (relationGuid, associationName)
;

CREATE INDEX idx_csURI ON @PREFIX@codingScheme
(codingSchemeURI ASC)
;

CREATE INDEX idx_csURIVersion ON @PREFIX@codingScheme
(codingSchemeURI ASC, representsVersion ASC)
;

CREATE INDEX idx_csName ON @PREFIX@codingScheme
(codingSchemeName ASC)
;

CREATE INDEX idx_csNameVersion ON @PREFIX@codingScheme
(codingSchemeName ASC, representsVersion ASC)
;

CREATE INDEX idx_csMultiAttrib ON @PREFIX@csMultiAttrib
(codingSchemeGuid ASC, attributeType ASC)
;

ALTER TABLE @PREFIX@csSupportedAttrib
	ADD CONSTRAINT UQ_mapping UNIQUE (codingSchemeGuid, supportedAttributeTag, id)
;

CREATE INDEX idx_entity ON @PREFIX@entity
(codingSchemeGuid ASC, entityCode ASC)
;

CREATE INDEX idx_entityNS ON @PREFIX@entity
(codingSchemeGuid ASC, entityCode ASC, entityCodeNamespace ASC)
;

ALTER TABLE @PREFIX@entityAssnQuals
	ADD CONSTRAINT UQ_entityAssnQuals UNIQUE (referenceGuid, qualifierName, qualifierValue)
;

ALTER TABLE @PREFIX@entityAssnsToData
	ADD CONSTRAINT UQ_entAsToData_source UNIQUE (sourceEntityCode, sourceEntityCodeNamespace)
;

CREATE INDEX idx_entAsToData_source ON @PREFIX@entityAssnsToData
(associationPredicateGuid ASC, sourceEntityCode ASC)
;

CREATE INDEX idx_entAsToEnt_source ON @PREFIX@entityAssnsToEntity
(associationPredicateGuid ASC, sourceEntityCode ASC)
;

CREATE INDEX idx_entAsToEnt_sourceNS ON @PREFIX@entityAssnsToEntity
(associationPredicateGuid ASC, sourceEntityCode ASC, sourceEntityCodeNamespace ASC)
;

CREATE INDEX idx_entAsToEnt_target ON @PREFIX@entityAssnsToEntity
(associationPredicateGuid ASC, targetEntityCode ASC)
;

CREATE INDEX idx_entAsToEnt_targetNS ON @PREFIX@entityAssnsToEntity
(associationPredicateGuid ASC, targetEntityCode ASC, targetEntityCodeNamespace ASC)
;

ALTER TABLE @PREFIX@entityAssnsToEntityTr
	ADD CONSTRAINT UQ_sourceTargetCombo UNIQUE (sourceEntityCode, sourceEntityCodeNamespace, targetEntityCode, targetEntityCodeNamespace, associationPredicateGuid)
;

CREATE INDEX idx_entAsToEntTr_source ON @PREFIX@entityAssnsToEntityTr
(associationPredicateGuid ASC, sourceEntityCode ASC, sourceEntityCodeNamespace ASC)
;

CREATE INDEX idx_entAsToEntTr_target ON @PREFIX@entityAssnsToEntityTr
(associationPredicateGuid ASC, targetEntityCode ASC, targetEntityCodeNamespace ASC)
;

ALTER TABLE @PREFIX@property
	ADD CONSTRAINT UQ_property UNIQUE (referenceGuid, propertyName, propertyId)
;

CREATE INDEX idx_referenceGuid ON @PREFIX@property
(referenceGuid ASC)
;

ALTER TABLE @PREFIX@propertyLinks
	ADD CONSTRAINT UQ_propLinks UNIQUE (sourcePropertyGuid, link, targetPropertyGuid)
;

CREATE INDEX idx_sourcePropertyGuid ON @PREFIX@propertyLinks
(sourcePropertyGuid ASC)
;

CREATE INDEX idx_targetPropertyGuid ON @PREFIX@propertyLinks
(targetPropertyGuid ASC)
;

CREATE INDEX idx_propertyMultiAttrib ON @PREFIX@propertyMultiAttrib
(propertyGuid ASC)
;



--  Create Foreign Key Constraints 
ALTER TABLE @PREFIX@associationPredicate ADD CONSTRAINT FK_associationPredica_relation 
	FOREIGN KEY (relationGuid) REFERENCES @PREFIX@relation (relationGuid)
ON DELETE CASCADE
;

ALTER TABLE @PREFIX@codingScheme ADD CONSTRAINT FK_cs_releaseGuid 
	FOREIGN KEY (releaseGuid) REFERENCES @DEFAULT_PREFIX@systemRelease (releaseGuid)
;

ALTER TABLE @PREFIX@csMultiAttrib ADD CONSTRAINT FK_csMulti_csGuid 
	FOREIGN KEY (codingSchemeGuid) REFERENCES @PREFIX@codingScheme (codingSchemeGuid)
ON DELETE CASCADE
;

ALTER TABLE @PREFIX@csSupportedAttrib ADD CONSTRAINT FK_map_csGuid 
	FOREIGN KEY (codingSchemeGuid) REFERENCES @PREFIX@codingScheme (codingSchemeGuid)
ON DELETE CASCADE
;

ALTER TABLE @PREFIX@entity ADD CONSTRAINT FK_ent_csGuid 
	FOREIGN KEY (codingSchemeGuid) REFERENCES @PREFIX@codingScheme (codingSchemeGuid)
ON DELETE CASCADE
;

ALTER TABLE @PREFIX@entityAssnsToData ADD CONSTRAINT FK_entAsToData_assnGuid 
	FOREIGN KEY (associationPredicateGuid) REFERENCES @PREFIX@associationPredicate (associationPredicateGuid)
ON DELETE CASCADE
;

ALTER TABLE @PREFIX@entityAssnsToEntity ADD CONSTRAINT FK_entAsToEnt_assnGuid 
	FOREIGN KEY (associationPredicateGuid) REFERENCES @PREFIX@associationPredicate (associationPredicateGuid)
ON DELETE CASCADE
;

ALTER TABLE @PREFIX@entityAssnsToEntityTr ADD CONSTRAINT FK_entAsToEntTr_assnGuid 
	FOREIGN KEY (associationPredicateGuid) REFERENCES @PREFIX@associationPredicate (associationPredicateGuid)
ON DELETE CASCADE
;

ALTER TABLE @PREFIX@entityType ADD CONSTRAINT FK_eType_entityGuid 
	FOREIGN KEY (entityGuid) REFERENCES @PREFIX@entity (entityGuid)
ON DELETE CASCADE
;

ALTER TABLE @PREFIX@entryState ADD CONSTRAINT FK_es_prevEntryStateGuid 
	FOREIGN KEY (prevEntryStateGuid) REFERENCES @PREFIX@entryState (entryStateGuid)
ON DELETE CASCADE
;

ALTER TABLE @PREFIX@entryState ADD CONSTRAINT FK_es_revisionGuid 
	FOREIGN KEY (revisionGuid) REFERENCES @DEFAULT_PREFIX@revision (revisionGuid)
;

ALTER TABLE @PREFIX@entryState ADD CONSTRAINT FK_es_prevRevisionGuid 
	FOREIGN KEY (prevRevisionGuid) REFERENCES @DEFAULT_PREFIX@revision (revisionGuid)
;

ALTER TABLE @PREFIX@propertyLinks ADD CONSTRAINT FK_pLinks_sPropGuid 
	FOREIGN KEY (sourcePropertyGuid) REFERENCES @PREFIX@property (propertyGuid)
ON DELETE CASCADE
;

ALTER TABLE @PREFIX@propertyLinks ADD CONSTRAINT FK_pLinks_tPropGuid 
	FOREIGN KEY (targetPropertyGuid) REFERENCES @PREFIX@property (propertyGuid)
ON DELETE CASCADE
;

ALTER TABLE @PREFIX@propertyMultiAttrib ADD CONSTRAINT FK_pma_propertyGuid 
	FOREIGN KEY (propertyGuid) REFERENCES @PREFIX@property (propertyGuid)
ON DELETE CASCADE
;

ALTER TABLE @PREFIX@relation ADD CONSTRAINT FK_relation_codingScheme 
	FOREIGN KEY (codingSchemeGuid) REFERENCES @PREFIX@codingScheme (codingSchemeGuid)
ON DELETE CASCADE
;

ALTER TABLE @PREFIX@revision ADD CONSTRAINT FK_rev_releaseGuid 
	FOREIGN KEY (releaseGuid) REFERENCES @PREFIX@systemRelease (releaseGuid)
;
