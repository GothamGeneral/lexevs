<project name="CTS2 Model" default="all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<description>
		Buildfile for the Castor Rendering of the LexBIG data model
	</description>

	<property file="build.properties"/>
	
	<!-- set global properties for this build -->
	<property name="generated" 	location="Castor/src"/>
	<property name="src" 	location="src/main/java"/>
	<property name="castor.src" 	location="src/castor/java"/>
	<property name="dist"		location="target"/>
	<property name="classes"	location="Castor/classes"/>
	<property name="docs"  		location="Castor/JavaDocs"/>
	<property name="lib.dir" value="lib"/>
	<property name="xsd.url" value="http://informatics.mayo.edu/svn/trunk/cts2/spec/psm/rest"/>

	<!-- bda related properties -->
	<property name="bda.build.dir" location="../../lexevs_bda/lbPackager"/>
	<property file="bda.properties" location="${bda.build.dir}"/>
	<property name="lgSharedLibs.dir" location="../lgSharedLibraries"/>	
	
	<path id="classpath">
		<path refid="ivy.path"/>
	</path>
	
	<!--*******************************************************************-->
		<!--** IVY TARGETS AND DEPENDENCY PATHS **-->
		<!--*******************************************************************-->
		<property name="ivy.settings.file" location="${lbPackager.dir}/ivysettings.xml" />
		<property name="ivy.def.file" location="ivy.xml" />

		<property name="ivy.jar.dir" value="${lbPackager.dir}/ivy/lib" />
		<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy-2.1.0-rc1.jar" />

		<target name="ivy:init">
	
			<path id="ivy.lib.path">
					<fileset dir="${ivy.jar.dir}" includes="*.jar" />
				</path>
				<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant"
					classpathref="ivy.lib.path" />
				<ivy:settings file="${ivy.settings.file}" />
		</target>

		<target name="ivy:clean" depends="clean:dependencies"
			description="Clean">
			<ivy:settings file="${ivy.settings.file}" />
			<ivy:cleancache />
			<delete dir="${lib.dir}" />
		</target>

		<target name="clean:dependencies">
			<delete dir="${genepattern-service.jar.compile.lib.dir}" />
		</target>

		<target name="ivy:setup" depends="ivy:setup-compile"
			description="Updates the local ivy repository for all build and test dependencies." />

		<target name="ivy:setup-compile" depends="ivy:init">
			<ivy:resolve refresh="true" conf="default" />
			<ivy:cachepath pathid="classpath" conf="default"/>
			<ivy:retrieve pattern="${lib.dir}/[conf]/[type]/[artifact]-[revision].[ext]" conf="default" />
		</target>
		<!--*******************************************************************-->
		<!--** END IVY TARGETS AND DEPENDENCY PATHS **-->
		<!--*******************************************************************-->
	
	<target name="init" depends="ivy:setup"/>

	<target name="clean"  description="clean up" >
		<!-- Delete the ${generated} and ${docs} directory trees -->
		<delete dir="${dist}"/>
		<delete dir="${docs}"/>
		<delete dir="${generated}"/>
		<delete dir="${classes}"/>
	</target>
	
	<target name="genCastorFromXSD" depends="compile-castor-src" description="generate the Castor representation of the schema">
		<echo>Generate Castor Java</echo>
		<delete dir="${generated}"/>
		<mkdir dir="${generated}"/>
		
		<antcall target="genCastorJava">
			<param name="type" value="schema"/>
   			<param name="xsdFile" value="Association"/>
  		</antcall>
	
		<antcall target="genCastorJava">
			<param name="type" value="schema"/>
   			<param name="xsdFile" value="CodeSystem"/>
  		</antcall>
		
		<antcall target="genCastorJava">
			<param name="type" value="schema"/>
	   		<param name="xsdFile" value="CodeSystemVersion"/>
	  	</antcall>
			
		<antcall target="genCastorJava">
			<param name="type" value="schema"/>
			<param name="xsdFile" value="ConceptDomain"/>
		</antcall>
			
		<antcall target="genCastorJava">
			<param name="type" value="schema"/>
			<param name="xsdFile" value="Core"/>
		</antcall>
			
		<antcall target="genCastorJava">
			<param name="type" value="schema"/>
			<param name="xsdFile" value="Entity"/>
		</antcall>
		
		<antcall target="genCastorJava">
			<param name="type" value="schema"/>
			<param name="xsdFile" value="Map"/>
		</antcall>

		<antcall target="genCastorJava">
			<param name="type" value="schema"/>
			<param name="xsdFile" value="ValueSet"/>
		</antcall>

		<antcall target="genCastorJava">
			<param name="type" value="schema"/>
			<param name="xsdFile" value="ValueSetResolution"/>
		</antcall>
		
		<antcall target="genCastorJava">
			<param name="type" value="schema"/>
			<param name="xsdFile" value="Updates"/>
		</antcall>
		
		<!-- Services -->
		<antcall target="genCastorJava">
			<param name="type" value="serviceSchema"/>
			<param name="xsdFile" value="AssociationServices"/>
		</antcall>
		
		<antcall target="genCastorJava">
			<param name="type" value="serviceSchema"/>
			<param name="xsdFile" value="CodeSystemServices"/>
		</antcall>
		
		<antcall target="genCastorJava">
			<param name="type" value="serviceSchema"/>
			<param name="xsdFile" value="CodeSystemVersionServices"/>
		</antcall>
		
		<antcall target="genCastorJava">
			<param name="type" value="serviceSchema"/>
			<param name="xsdFile" value="ConceptDomainServices"/>
		</antcall>
		
		<antcall target="genCastorJava">
			<param name="type" value="serviceSchema"/>
			<param name="xsdFile" value="CoreService"/>
		</antcall>
		
		<antcall target="genCastorJava">
			<param name="type" value="serviceSchema"/>
			<param name="xsdFile" value="EntityDescriptionServices"/>
		</antcall>
		
		<antcall target="genCastorJava">
			<param name="type" value="serviceSchema"/>
			<param name="xsdFile" value="MapServices"/>
		</antcall>
		
		<antcall target="genCastorJava">
			<param name="type" value="serviceSchema"/>
			<param name="xsdFile" value="StatementServices"/>
		</antcall>
		
		<antcall target="genCastorJava">
			<param name="type" value="serviceSchema"/>
			<param name="xsdFile" value="ValueSetDefinitionServices"/>
		</antcall>
		
		<antcall target="genCastorJava">
			<param name="type" value="serviceSchema"/>
			<param name="xsdFile" value="ValueSetRuleResolutionServices"/>
		</antcall>
		
		<antcall target="genCastorJava">
			<param name="type" value="serviceSchema"/>
			<param name="xsdFile" value="ValueSetServices"/>
		</antcall>
			
  	</target>
 
	<target name="genCastorJava" depends="init">
		<echo>Generating Castor Java from Schema ${xsdFile} from ${xsd.url}/${type}/${xsdFile}.xsd</echo>
		
		<path id="compile-classpath">
			<path refid="classpath"/>
			<pathelement location="${classes}"/>
		</path>
		
		<java classname="org.exolab.castor.builder.SourceGenerator" fork="true">
			<classpath refid="compile-classpath"/>
			<arg line="-is ${xsd.url}/${type}/${xsdFile}.xsd"/>
			<arg line="-dest '${generated}'"/>
			<arg line="-nomarshall"/>
			<arg line="-types j2"/>
			<arg line="-verbose"/>
			<arg line="-binding-file binding.xml"/>
			<arg line="-classPrinter modifying-writer"/>
		</java>

	</target>

	<target name="compile" depends="genCastorFromXSD" description="compile the source ">
		<mkdir dir="${classes}"/>
			
		<javac source="1.5" target="1.5" destdir="${classes}" debug="yes">
			<classpath refid="classpath"/>
			<src path="${generated}" />
			<src path="${src}" />
			<src path="${castor.src}"/>
			<exclude name="**/printer/**"/>	
		</javac>
	</target>
	
	<target name="compile-castor-src" depends="init">
		<mkdir dir="${classes}"/>
		<javac source="1.5" target="1.5" srcdir="${castor.src}" destdir="${classes}" debug="true">
			<include name="**/printer/**"/>	
			<classpath refid="classpath"/>
		</javac>
	</target>

	<target name="jar" depends="init, compile" description="generate the jar file" >
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}"/> 
			
		<!-- Put everything in ${build} into .jar file -->
		<jar jarfile="${dist}/${ivy.module}-${ivy.revision}.jar" basedir="${classes}"/>
		<jar jarfile="${dist}/${ivy.module}-${ivy.revision}-sources.jar" basedir="${generated}"/>
	</target>

	<target name="docs" depends="jar" description="Generate the javadocs">
		<mkdir dir="${docs}"/>
		<!--Create the javadocs-->
		<javadoc destdir="${docs}" windowtitle="LexBIG" additionalparam="-breakiterator">
			<package name="*"/>
			<classpath>
			      <path refid="classpath"/>
			      <pathelement location="${dist}/*.jar"/>
			</classpath>

			<sourcepath location="${generated}"/>
		</javadoc>
		<jar jarfile="${dist}/${ivy.module}-${ivy.revision}-javadoc.jar" basedir="${docs}"/>
	</target>
		
	<target name="resolve" depends="init" description="--> retrieve dependencies with ivy">
		<ivy:retrieve />
    </target>
	
	<target name="publish" depends="jar" unless="publish.skip">
	   	<ivy:makepom ivyfile="ivy.xml" pomfile="${dist}/${ivy.module}-${ivy.revision}.pom">
	   		<mapping conf="master" scope="compile"/>
	   		<mapping conf="default" scope="compile"/>
	   		<mapping conf="compile" scope="compile"/>
	   		<mapping conf="test" scope="test"/>
	   		<mapping conf="runtime" scope="runtime"/>
	   		<mapping conf="provided" scope="provided"/>
	   		<mapping conf="system" scope="system"/>
	   	</ivy:makepom>
		<ivy:publish resolver="nci-chain" forcedeliver="true" overwrite="true">
		   <artifacts pattern="${dist}/[artifact]-[revision](-[classifier]).[ext]" />
		</ivy:publish>
	</target>
	
	<target name="all" depends="init, clean, resolve, genCastorFromXSD, compile, jar, docs, publish" description="all - init, clean, genCastorXML, compile, jar, docs"/>
</project>
