<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/batch"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">

	<!-- <beans:import resource="classpath:rxnReaders.xml" /> -->
	<!-- <beans:import resource="rrfBaseLoader.xml" /> -->
	<beans:import resource="baseLoader.xml"/>
<!-- 	<beans:import resource="rxnCommonBeans.xml"/> -->
	<beans:import resource="repositories.xml" />
	<beans:import resource="writers.xml" />
	
	<beans:bean class="org.springframework.batch.core.scope.StepScope" />

	<beans:bean id="noopWriter" class="org.lexgrid.loader.writer.NoopWriter" />

	<beans:bean id="mrdocRelationNameProcessor"
		class="org.lexgrid.loader.rrf.processor.MrdocRelationNameProcessor" />

	<job id="rxnJob" restartable="true">
		<listeners>
		    <listener ref="cachingSupportedAttribuiteTemplate" />
			<listener ref="jobSetupListener" />
			<listener ref="cleanupListener" />
		</listeners>

		<step id="loadCodingScheme" next="registerCodingScheme">
			<tasklet>
				<listeners>
					<listener ref="stepCompletionListener" />
				</listeners>
				<chunk reader="rxnCodingSchemeReader" processor="rxnCodingSchemeProcessor"
					writer="codingSchemeWriter" commit-interval="1">
				</chunk>
			</tasklet>
		</step>

		<step id="registerCodingScheme">
			<tasklet ref="registeringTasklet" />
			<fail on="FAILED" exit-code="NON-RECOVERABLE" />
			<next on="*" to="loadRxn" />
		</step>

		<split id="loadRxn">

			<flow>
		<step id="loadHardcodedValues" >
			<tasklet ref="introspectiveHardcodedValuesTasklet" />
		</step>
			</flow>

			<flow>

				<split id="loadContent" task-executor="taskExecutor">


					<flow>

						<split id="loadEntitiesAndPropertiesAndIndex">
							<flow>
								<step id="rxnLoadEntity">
									<tasklet>
										<listeners>
											<listener ref="stepCompletionListener" />
										</listeners>
										<chunk reader="rxnconsoStagedReader" processor="rxnEntityListProcessor"
											writer="entityWriter" commit-interval="1000">
											<streams>
												<stream ref="rxnconsoReader" />
											</streams>
										</chunk>
									</tasklet>
								</step>
							</flow>
							
							<flow>
								<split id="loadEntitiesAndProperties" task-executor="taskExecutor">
									<flow>
										<step id="rxnloadRxnCuiProperties">
											<tasklet>
												<listeners>
													<listener ref="stepCompletionListener" />
												</listeners>
												<chunk reader="rxnconsoStagedReader" processor="rxnCuiPropertyListProcessor"
													writer="entityPropertyListWriter" commit-interval="1000">
													<streams>
														<stream ref="rxnconsoReader" />
													</streams>
												</chunk>
											</tasklet>
										</step>
									</flow>

									<flow>
										<step id="rxnloadRxnMrsatProperties">
											<tasklet>
												<listeners>
													<listener ref="stepCompletionListener" />
												</listeners>
												<chunk reader="rxnMrsatSkippingReader" processor="rxnMrsatPropertyProcessor"
													writer="entityPropertyWriter" skip-limit="500"
													commit-interval="1000">
													<streams>
														<stream ref="rxnsatReader" />
													</streams>
													<skippable-exception-classes>
											
					<!-- 									org.springframework.dao.DataIntegrityViolationException -->
				                                    </skippable-exception-classes>
												</chunk>
											</tasklet>
										</step>
									</flow>

									<flow>
										<step id="rxnloadRxnMrstyProperties">
											<tasklet>
												<listeners>
													<listener ref="stepCompletionListener" />
												</listeners>
												<chunk reader="rxnMrstySkippingReader" processor="rxnMrstyCombiningProcessor"
													writer="entityPropertyListWriter" commit-interval="1000">
													<streams>
														<stream ref="rxnstyReader" />
													</streams>
												</chunk>
											</tasklet>
										</step>
									</flow>

								</split>
							</flow>

							<flow>
								<step id="index">
									<tasklet ref="indexingTasklet" />
								</step>
							</flow>
							
						</split>

					</flow>


					<flow>

						<step id="rxnLoadEntityToEntityAssociations" next="processAssociations">
							<tasklet>
								<listeners>
									<listener ref="stepCompletionListener" />
								</listeners>
								<chunk reader="rxnMrrelSkippingReader" processor="rxnEntityAssocToEntityProcessor"
									writer="associationSourceWriter" skip-limit="500"
									commit-interval="1000">
									<streams>
										<stream ref="rxnrelReader" />
									</streams>
									<skippable-exception-classes>
													<!-- 	org.springframework.dao.DataIntegrityViolationException -->
				                    </skippable-exception-classes>
								</chunk>
							</tasklet>
						</step>



						<step id="processAssociations" next="buildTransitivityTable">
							<tasklet>
								<listeners>
									<listener ref="stepCompletionListener" />
								</listeners>
								<chunk reader="rxndocAssociationGroupReader" processor="rxnAssociationProcessor"
									writer="entityListWriter" commit-interval="1000">
									<streams>
										<stream ref="rxndocReader" />
									</streams>
								</chunk>
							</tasklet>
						</step>

						<step id="buildTransitivityTable">
							<tasklet ref="transitivityBuildingTasklet" />
						</step>

					</flow>

				</split>

			</flow>
		</split>

	</job>


	<beans:bean id="rxnStagingManager" parent="stagingManager">
		<beans:property name="registeredStagingDatabases">
			<beans:map/>				
		</beans:property>
	</beans:bean>


	<beans:bean id="cleanupListener" parent="abstractCleanupListener"
		class="org.lexgrid.loader.listener.CleanupListener">
		<beans:property name="stagingManager" ref="rxnStagingManager"/>
		<beans:property name="codingSchemeIdSetter" ref="rxnCodingSchemeNameSetter" />
	</beans:bean>

	<beans:bean id="rxnAssociationProcessor" parent="associationProcessor">
		<beans:property name="codingSchemeIdSetter">
			<beans:ref local="rxnCodingSchemeNameSetter" />
		</beans:property>
<!-- 		<beans:property name="mrconsoStagingDao">
			<beans:ref bean="postProcessingDao" />
		</beans:property> -->
	</beans:bean>

	<beans:bean id="associationProcessor"
		class="org.lexgrid.loader.rxn.processor.RxndocAssociationProcessor"
		abstract="true">
<!-- 		<beans:property name="supportedAttributeTemplate">
			<beans:ref bean="cachingSupportedAttribuiteTemplate" />
		</beans:property> -->
	</beans:bean>

<!-- 	<beans:bean id="postProcessingDao" parent="hibernateRrfPostProcessingDao">
		<beans:property name="codingSchemeIdSetter">
			<beans:ref bean="rxnCodingSchemeNameSetter" />
		</beans:property>
	</beans:bean> -->
	
	<beans:bean id="codingSchemeProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<beans:property name="location">
			<beans:value>classpath:rxnConstants.props
			</beans:value>
		</beans:property>
	</beans:bean>
	
	<beans:bean id="rxnCodingSchemeNameSettingProcessor"
		abstract="true">
		<beans:property name="codingSchemeIdSetter">
			<beans:ref local="rxnCodingSchemeNameSetter" />
		</beans:property>
		<beans:property name="codingSchemeProperties">
			<beans:ref local="codingSchemeProperties" />
		</beans:property>
		<beans:property name="isoMap">
			<beans:ref bean="isoMap" />
		</beans:property>
<!-- 		<beans:property name="lexEvsDao">
			<beans:ref bean="lexEvsDao" />
		</beans:property> -->
	</beans:bean>

	<beans:bean id="combinedEntityAssocToEntityProcessor"
		class="org.lexgrid.loader.processor.ClassifierCompositeProcessor">
		<beans:property name="processorList">
			<beans:list>
			    <beans:ref bean="rxnEntityAssocToEntityProcessor" />
			</beans:list>
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnEntityListProcessor"
		class="org.lexgrid.loader.rxn.processor.RxnMrconsoGroupEntityProcessor">
		<beans:property name="presentationResolver">
				<beans:bean
				class="org.lexgrid.loader.rxn.processor.support.RxnPresentationPropertyResolver">
				<beans:property name="entityCodeResolver">
					<beans:bean
						class="org.lexgrid.loader.rxn.processor.support.RxnMrconsoEntityCodeResolver" />
				</beans:property>
				<beans:property name="entityNamespaceResolver">
					<beans:ref bean="rxnEntityNamespaceResolver" />
				</beans:property>
				<beans:property name="individualIdSetter">
					<beans:bean
						class="org.lexgrid.loader.rxn.data.property.MrconsoAuiIndividualIdSetter" />
				</beans:property>
			    </beans:bean>
		</beans:property>
		<beans:property name="sourceResolvers">
			<beans:list>
				<beans:ref bean="rxnMrconsoSourceResolver"/>
			</beans:list>
		</beans:property>
		<beans:property name="qualifierResolvers">
			<beans:list>
					<beans:ref bean="rxnMrconsoSourceCodePropertyQualifierResolver"/>
 				    <!-- <beans:ref bean="mrconsoLuiPropertyQualifierResolver"/>
					<beans:ref bean="mrconsoSuiPropertyQualifierResolver"/>
					<beans:ref bean="mrconsoSauiPropertyQualifierResolver"/>
					<beans:ref bean="mrconsoSduiPropertyQualifierResolver"/> -->
					<beans:ref bean="mrconsoScuiPropertyQualifierResolver"/>
					<beans:ref bean="mrconsoSuppressPropertyQualifierResolver" />
<!-- 					<beans:ref bean="mrconsoCvfPropertyQualifierResolver" />
					<beans:ref bean="mrrankMultiattributeResolver" /> -->
					<beans:ref bean="mrconsoAuiPropertyQualifierResolver" />
			</beans:list>
		</beans:property>
		
		<beans:property name="supportedAttributeTemplate" ref="cachingSupportedAttribuiteTemplate" />
 		<beans:property name="sortingListProcessor">
			<beans:bean
				class="org.lexgrid.loader.processor.SortingListProcessor">
				<beans:property name="propertyComparator">
					<beans:ref bean="rxnMrconsoPropertyComparator" />
                </beans:property>
                	<beans:property name="delegate"
					ref="entityProcessor" />
            </beans:bean>
            </beans:property>
	</beans:bean>
	
	<beans:bean id="entityProcessor"
		class="org.lexgrid.loader.processor.EntityProcessor" parent="codingSchemeNameSettingProcessor">
		<beans:property name="entityResolver">
			<beans:ref bean="rxnEntityResolver" />
		</beans:property>
	</beans:bean>
	
	<beans:bean id="rxnPropertyComparator" class="org.lexgrid.loader.rxn.data.property.EntityPropertyPropertyComparator">
	</beans:bean>
	<beans:bean id="rxnMrconsoPropertyComparator" class="org.lexgrid.loader.rxn.data.property.MrconsoPropertyComparator">
	</beans:bean>
	<beans:bean id="rxnMrconsoSourceResolver" 
		class="org.lexgrid.loader.rxn.processor.support.RxnMrconsoSourceResolver">
<!-- 		parent="baseMrconsoPropertyQualifierResolver"> -->
		
	</beans:bean>
	
	<beans:bean id="rxnMrconsoSourceCodePropertyQualifierResolver" 
	class="org.lexgrid.loader.rxn.processor.support.RxnSourceCodePropertyQualifierResolver">
	</beans:bean>
	
	<beans:bean id="mrconsoScuiPropertyQualifierResolver" 
		class="org.lexgrid.loader.rrf.processor.support.MrconsoScuiPropertyQualifierResolver">
	</beans:bean>
	
	<beans:bean id="mrconsoSuppressPropertyQualifierResolver" 
		class="org.lexgrid.loader.rrf.processor.support.MrconsoSuppressPropertyQualifierResolver">
	</beans:bean>
	
    <beans:bean id="mrconsoAuiPropertyQualifierResolver" 
		class="org.lexgrid.loader.rrf.processor.support.MrconsoAuiPropertyQualifierResolver">
	</beans:bean>
	
<!-- 		<beans:property name="presentationResolver" ref="rxnPresentationPropertyResolver"/>
		<beans:property name="supportedAttributeTemplate" ref="cachingSupportedAttribuiteTemplate" />
		<beans:property name="sortingListProcessor">
			<beans:bean
				class="org.lexgrid.loader.processor.SortingListProcessor">
				<beans:property name="propertyComparator">
					<beans:ref bean="propertyComparator" />
				</beans:property>
				<beans:property name="delegate"
					ref="rxnEntityProcessor" />
			</beans:bean>
		</beans:property>
		<beans:property name="filteredPropertyResolvers">
			<beans:map>
				<beans:entry>
					<beans:key>
						<beans:bean class="org.lexgrid.loader.rxn.processor.support.filter.UniqueCuiListFilter"/>	
					</beans:key>
					<beans:ref bean="rxnCuiPropertyResolver"/>
				</beans:entry>
			</beans:map>
		</beans:property> -->
<!-- 	</beans:bean>
 -->
 	<beans:bean id="rxnEntityAssocToEntityProcessor"
		class="org.lexgrid.loader.rxn.processor.RxnEntityAssnsToEntityProcessor" parent="codingSchemeNameSettingProcessor">
		
		
		<beans:property name="relationResolver">
			<beans:bean
				class="org.lexgrid.loader.rxn.processor.support.RxnRelationResolver"
				parent="metaRelationResolver" />
		</beans:property>
			
		<beans:property name="sourcePropertyIdResolver">
			<beans:bean
				class="org.lexgrid.loader.rrf.processor.support.MrrelAuiPropertyIdResolver">
				<beans:property name="aui" value="AUI2" />
			</beans:bean>
		</beans:property>
	
		<beans:property name="targetPropertyIdResolver">
			<beans:bean
				class="org.lexgrid.loader.rrf.processor.support.MrrelAuiPropertyIdResolver">
				<beans:property name="aui" value="AUI1" />
			</beans:bean>
		</beans:property>
		
		<beans:property name="supportedAttributeTemplate" ref="cachingSupportedAttribuiteTemplate" />
		
		<beans:property name="associationInstanceIdResolver">
			<beans:bean class="org.lexgrid.loader.rrf.data.association.MrrelRuiAssociationInstanceIdResolver"/>
		</beans:property>		
	
		<beans:property name="associationPredicateKeyResolver" ref="associationPredicateKeyResolver"/>
		
		<beans:property name="databaseServiceManager" ref="databaseServiceManager"/>
					
		<beans:property name="qualifierResolvers">
		<beans:list>
				<beans:bean
				class="org.lexgrid.loader.rxn.processor.support.RxnSourceQualifierResolver" />
<!-- 				<beans:bean
				class="org.lexgrid.loader.rrf.processor.support.RelaAssocQualResolver" /> -->
				<beans:bean
				class="org.lexgrid.loader.rxn.processor.support.SourceAuiAssocQualResolver" />
				<beans:bean
				class="org.lexgrid.loader.rxn.processor.support.TargetAuiAssocQualResolver" />
				<beans:bean
				class="org.lexgrid.loader.rxn.processor.support.SelfReferencingAssocQualResolver" />
				<beans:bean
				class="org.lexgrid.loader.rrf.processor.support.Stype1AssocQualResolver" />
				<beans:bean
				class="org.lexgrid.loader.rrf.processor.support.Stype2AssocQualResolver" />
				<beans:bean
				class="org.lexgrid.loader.rrf.processor.support.SruiAssocQualResolver" />
				<beans:bean
				class="org.lexgrid.loader.rrf.processor.support.RgAssocQualResolver" />
				<beans:bean
				class="org.lexgrid.loader.rrf.processor.support.SuppressAssocQualResolver" />
				<beans:bean
				class="org.lexgrid.loader.rrf.processor.support.CvfAssocQualResolver" />
				<beans:bean
				class="org.lexgrid.loader.rrf.processor.support.RuiAssocQualResolver" />		
		</beans:list>
		</beans:property>
	</beans:bean>

<!-- 	<beans:bean id="entityAssnProcessor"
		class="org.lexgrid.loader.processor.EntityAssnsToEntityProcessor"
		parent="codingSchemeNameSettingProcessor">
		<beans:property name="relationResolver">
			<beans:bean
				class="org.lexgrid.loader.rxn.processor.support.RxnRelationResolver"
				parent="metaRelationResolver" />
		</beans:property>
		<beans:property name="keyResolver">
			<beans:bean
				class="org.lexgrid.loader.rrf.data.association.MrrelRuiAssociationInstanceIdResolver" />
		</beans:property>
	</beans:bean> -->


	<beans:bean id="codingSchemeNameSettingProcessor" abstract="true">
		<beans:property name="codingSchemeIdSetter">
			<beans:ref local="rxnCodingSchemeNameSetter" />
		</beans:property>
	</beans:bean>

	<beans:bean id="metaRelationResolver" abstract="true">
		<beans:property name="codingSchemeIdSetter">
			<beans:ref local="rxnCodingSchemeNameSetter" />
		</beans:property>
	</beans:bean>

	<beans:bean id="associationPredicateKeyResolver" 
		class="org.lexgrid.loader.database.key.AssociationPredicateCreatingKeyResolver">
		<beans:property name="databaseServiceManager" ref="databaseServiceManager"/>
	</beans:bean>


<!-- 	<beans:bean id="entityPropertyPropertyComparator"
		class="org.lexgrid.loader.rxn.data.property.EntityPropertyPropertyComparator">
		<beans:property name="mrrankUtility">
			<beans:ref bean="mrrankUtility" />
		</beans:property>
		<beans:property name="sab" value="${sab}" />
	</beans:bean> -->

	<beans:bean id="mrhierAssocAndPropQualProcessor"
		class="org.lexgrid.loader.rxn.processor.MrhierAssocAndPropQualProcessor">
		<beans:property name="codingSchemeIdSetter">
			<beans:ref local="rxnCodingSchemeNameSetter" />
		</beans:property>
<!-- 		<beans:property name="lexEvsDao">
			<beans:ref bean="lexEvsDao" />
		</beans:property> -->
		<beans:property name="mrconsoStagingDao">
			<beans:ref bean="mrconsoStagingDao" />
		</beans:property>
	</beans:bean>

	<beans:bean id="hardcodedValuesReader"
		class="org.lexgrid.loader.rxn.hardcodedvalues.RxnHardcodedValuesFactory">
		<beans:property name="codingSchemeIdSetter">
			<beans:ref local="rxnCodingSchemeNameSetter" />
		</beans:property>
		<beans:property name="supportedAttributeTemplate">
			<beans:ref bean="cachingSupportedAttribuiteTemplate" />
		</beans:property>
		<beans:property name="databaseServiceManager" ref="databaseServiceManager" />
	</beans:bean>

	<beans:bean id="rxnconsoStagingReader"
		class="org.springframework.batch.item.database.JdbcPagingItemReader"
		scope="step">
		<beans:property name="queryProvider">
			<beans:bean
				class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
				<beans:property name="sortKey" value="CODE" />
				<beans:property name="selectClause"
					value="CODE,CUI,LAT,TS,LUI,STT,SUI,ISPREF,AUI,SAUI,SCUI,SDUI,SAB,TTY,STR,SRL,SUPPRESS,CVF" />
				<beans:property name="fromClause" value="${prefix}mrconsoStaging" />
				<beans:property name="whereClause" value="SAB = '${sab}'" />
				<beans:property name="dataSource">
					<beans:ref bean="dataSource" />
				</beans:property>
			</beans:bean>
		</beans:property>
		<beans:property name="pageSize" value="30000" />
		<beans:property name="rowMapper">
			<beans:bean class="org.springframework.jdbc.core.BeanPropertyRowMapper">
				<beans:property name="mappedClass"
					value="org.lexgrid.loader.rrf.model.Mrconso" />
			</beans:bean>
		</beans:property>
		<beans:property name="dataSource">
			<beans:ref bean="dataSource" />
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnCodingSchemeProcessor"
		class="org.lexgrid.loader.rxn.processor.RxnCodingSchemeProcessor"
		scope="step">
		<beans:property name="isoMap" ref="isoMap"/>
		<beans:property name="codingSchemeNameSetter">
			<beans:ref local="rxnCodingSchemeNameSetter" />
		</beans:property>
		<beans:property name="sab" value="${sab}" />
		<beans:property name="supportedAttributeTemplate">
			<beans:ref bean="cachingSupportedAttribuiteTemplate" />
		</beans:property>
		<beans:property name="prefix" value="${prefix}"/>
	</beans:bean>

	<beans:bean id="rxnEntityResolver"
		class="org.lexgrid.loader.rxn.processor.support.RxnMrconsoEntityResolver">
		<beans:property name="entityNamespaceResolver">
			<beans:ref bean="rxnEntityNamespaceResolver" />
		</beans:property>
		<beans:property name="entityDescriptionResolver">
			<beans:bean
				class="org.lexgrid.loader.rrf.processor.support.DefaultMrconsoEntityDescriptionResolver" />
		</beans:property>
		<beans:property name="entityCodeResolver">
			<beans:bean
				class="org.lexgrid.loader.rxn.processor.support.RxnMrconsoEntityCodeResolver" />
		</beans:property>
	</beans:bean>


<!-- 	<beans:bean id="rxnEntityListProcessor"
		class="org.lexgrid.loader.processor.HighestRankingListProcessor">
		<beans:property name="sortingListProcessor">
			<beans:bean class="org.lexgrid.loader.processor.SortingListProcessor">
				<beans:property name="propertyComparator">
					<beans:ref bean="propertyComparator" />
				</beans:property>
				<beans:property name="delegate" ref="rxnEntityProcessor" />
			</beans:bean>
		</beans:property>
	</beans:bean> -->

<!-- 	<beans:bean id="entityTypeAddingEntityProcessor"
		class="org.lexgrid.loader.processor.ClassifierCompositeProcessor">
		<beans:property name="processorList">
			<beans:list>
				<beans:ref bean="rxnEntityListProcessor" />
				<beans:ref bean="rxnPresentationPropertyListProcessor" />
				<beans:bean
					class="org.lexgrid.loader.processor.decorator.ListToSingleItemProcessorDecorator">
					<beans:constructor-arg>
						<beans:bean
							class="org.lexgrid.loader.processor.SettableEntityTypeProcessor">
							<beans:property name="entityCodeResolver">
								<beans:bean
									class="org.lexgrid.loader.rxn.processor.support.RxnMrconsoEntityCodeResolver" />
							</beans:property>
							<beans:property name="codingSchemeIdSetter">
								<beans:ref bean="rxnCodingSchemeNameSetter" />
							</beans:property>
						</beans:bean>
					</beans:constructor-arg>
				</beans:bean>
			</beans:list>
		</beans:property>
	</beans:bean> -->

	<beans:bean id="rxnEntityProcessor"
		class="org.lexgrid.loader.processor.EntityProcessor">
		<beans:property name="codingSchemeIdSetter">
			<beans:ref local="rxnCodingSchemeNameSetter" />
		</beans:property>
		<beans:property name="entityResolver">
			<beans:ref bean="rxnEntityResolver" />
		</beans:property>
	</beans:bean>

<!-- 	<beans:bean id="rxnPresentationPropertyListProcessor"
		class="org.lexgrid.loader.processor.EntityPropertyListProcessor">
		<beans:property name="propertyComparator">
			<beans:ref bean="propertyComparator" />
		</beans:property>
		<beans:property name="listIdSetter">
			<beans:bean class="org.lexgrid.loader.data.property.NoopListIdSetter" />
		</beans:property>
		<beans:property name="preferredSetter">
			<beans:bean
				class="org.lexgrid.loader.data.property.GroupByLanguagePreferredSetter" />
		</beans:property>
		<beans:property name="delegate" ref="rxnPresentationPropertyProcessor" />
	</beans:bean> -->

	<beans:bean id="rxnMrstyListProcessor"
		class="org.lexgrid.loader.rxn.processor.MrstyListProcessor">
		<beans:property name="mrconsoStagingDao">
			<beans:ref bean="mrconsoStagingDao" />
		</beans:property>
		<beans:property name="parameterizedlistIdSetter">
			<beans:bean
				class="org.lexgrid.loader.data.property.ParameterizedSequentialIdSetter">
				<beans:property name="prefix" value="MSTY" />
			</beans:bean>
		</beans:property>
		<beans:property name="sab" value="${sab}" />
		<beans:property name="delegate" ref="rxnMrstyCombiningProcessor" />
	</beans:bean>

	<beans:bean id="rxnCuiPropertyListProcessor"
		class="org.lexgrid.loader.processor.decorator.EntityPropertyListIdAddingDecorator">
		<beans:constructor-arg>
			<beans:bean class="org.lexgrid.loader.processor.PreFilteringListProcessor">
				<beans:property name="delegate" ref="rxnCuiPropertyProcessor" />
				<beans:property name="listFilter">
					<beans:bean
						class="org.lexgrid.loader.rxn.processor.support.filter.UniqueCuiListFilter" />
				</beans:property>
			</beans:bean>
		</beans:constructor-arg>
		<beans:property name="listIdSetter">
			<beans:bean
				class="org.lexgrid.loader.rxn.data.property.RxnPrefixedSequentialIdSetter">
				<beans:property name="prefix" value="cui" />
			</beans:bean>
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnCuiPropertyProcessor" parent="rxnDefaultPropertyProcessor"
		class="org.lexgrid.loader.processor.EntityPropertyProcessor">
		<beans:property name="propertyResolver" ref="rxnCuiPropertyResolver" />
		<beans:property name="entityKeyResolver" ref="databaseServiceEntityKeyResolver"/>
<!-- 			<beans:bean class="org.lexgrid.loader.database.key.NoopEntityKeyResolver"/>
		</beans:property> -->
	</beans:bean>

	<beans:bean id="rxnDefinitionPropertyProcessor" parent="rxnDefaultPropertyProcessor"
		class="org.lexgrid.loader.processor.EntityPropertyProcessor">
		<beans:property name="propertyResolver">
			<beans:ref bean="rxnDefinitionPropertyResolver"/>
		</beans:property>
		<beans:property name="entityKeyResolver" ref="databaseServiceEntityKeyResolver"/>
<!-- 		<beans:property name="entityKeyResolver">
			<beans:bean class="org.lexgrid.loader.database.key.NoopEntityKeyResolver"/>
		</beans:property> -->
	</beans:bean>

	<beans:bean id="rxnMrsatPropertyProcessor" parent="rxnDefaultPropertyProcessor"
		class="org.lexgrid.loader.rxn.processor.MrsatPropertyProcessor">
		<beans:property name="propertyResolver" ref="rxnMrsatPropertyResolver" />
		<beans:property name="entityKeyResolver" ref="databaseServiceEntityKeyResolver"/>
<!-- 	    <beans:property name="entityKeyResolver">
			<beans:bean class="org.lexgrid.loader.database.key.NoopEntityKeyResolver"/>
		</beans:property> -->
	</beans:bean>

	<beans:bean id="rxnMrstyCombiningProcessor"
		class="org.lexgrid.loader.processor.CombiningProcessor">
		<beans:property name="processors">
			<beans:list>
				<beans:ref bean="rxnSemanticTypePropertyProcessor" />
				<beans:ref bean="rxnTuiPropertyProcessor" />
			</beans:list>
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnSemanticTypePropertyProcessor" parent="rxnDefaultPropertyProcessor"
		class="org.lexgrid.loader.rxn.processor.MrstyPropertyProcessor">
		<beans:property name="propertyResolver">
			<beans:bean
				class="org.lexgrid.loader.rxn.processor.support.MrstySemanticTypePropertyResolver">
				<beans:property name="entityCodeResolver">
					<beans:bean
						class="org.lexgrid.loader.rxn.processor.support.RxnMrstyEntityCodeResolver" />
				</beans:property>
				<beans:property name="individualIdSetter">
					<beans:bean
						class="org.lexgrid.loader.rxn.data.property.MrstyIndividualIdSetter" />
				</beans:property >
				<beans:property name="entityNamespaceResolver">
				<beans:ref  bean="rxnEntityNamespaceResolver"/>
				</beans:property>
			</beans:bean>
		</beans:property>
		<beans:property name="entityKeyResolver">
			<beans:ref bean="databaseServiceEntityKeyResolver"/>
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnTuiPropertyProcessor" parent="rxnDefaultPropertyProcessor"
		class="org.lexgrid.loader.rxn.processor.MrstyPropertyProcessor">
		<beans:property name="propertyResolver">
			<beans:bean
				class="org.lexgrid.loader.rxn.processor.support.MrstyTuiPropertyResolver">
				<beans:property name="entityCodeResolver">
					<beans:bean
						class="org.lexgrid.loader.rxn.processor.support.RxnMrstyEntityCodeResolver" />
				</beans:property>
				<beans:property name="individualIdSetter">
					<beans:bean
						class="org.lexgrid.loader.rxn.data.property.MrstyIndividualIdSetter" />
				</beans:property>
					<beans:property name="entityNamespaceResolver">
				<beans:ref  bean="rxnEntityNamespaceResolver"/>
				</beans:property>
			</beans:bean>
		</beans:property>
		<beans:property name="entityKeyResolver">
			<beans:ref bean="databaseServiceEntityKeyResolver"/>
		</beans:property>
	</beans:bean>

<!-- 	<beans:bean id="rxnPresentationPropertyProcessor" parent="rxnDefaultPropertyProcessor"
		class="org.lexgrid.loader.processor.EntityPropertyProcessor">
		<beans:property name="propertyResolver" ref="rxnPresentationPropertyResolver" />
	</beans:bean> -->

	<beans:bean id="rxnRelaQualifierProcessor" parent="rxnDefaultPropertyProcessor"
		class="org.lexgrid.loader.processor.EntityAssnToEQualsProcessor">
		<beans:property name="qualifierResolver">
			<beans:bean
				class="org.lexgrid.loader.rrf.processor.support.RelaAssocQualResolver" />
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnPresentationPropertyResolver"
		class="org.lexgrid.loader.rxn.processor.support.RxnPropertyResolver">
		<beans:property name="individualIdSetter">
			<beans:bean
				class="org.lexgrid.loader.rxn.data.property.MrconsoAuiIndividualIdSetter" />
		</beans:property>
		<beans:property name="entityCodeResolver">
			<beans:bean
				class="org.lexgrid.loader.rxn.processor.support.RxnMrconsoEntityCodeResolver" />
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnMrsatPropertyResolver"
		class="org.lexgrid.loader.rxn.processor.support.MrsatPropertyResolver">
		<beans:property name="individualIdSetter">
			<beans:bean
				class="org.lexgrid.loader.rxn.data.property.MrsatIndividualIdSetter" />
		</beans:property>
		<beans:property name="entityCodeResolver">
			<beans:bean
				class="org.lexgrid.loader.rxn.processor.support.RxnMrsatEntityCodeResolver" />
		</beans:property>
		<beans:property name="entityNamespaceResolver" ref="rxnEntityNamespaceResolver"/>
		<beans:property name="mrsatUtility">
			<beans:ref bean="mrsatUtility" />
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnCuiPropertyResolver"
		class="org.lexgrid.loader.rxn.processor.support.RxnCuiPropertyResolver">
		<beans:property name="individualIdSetter">
			<beans:bean class="org.lexgrid.loader.data.property.NoopIndividualIdSetter" />
		</beans:property>
		<beans:property name="entityCodeResolver">
			<beans:bean
				class="org.lexgrid.loader.rxn.processor.support.RxnMrconsoEntityCodeResolver" />
		</beans:property>
		<beans:property name="entityNamespaceResolver" ref="rxnEntityNamespaceResolver"/>
	</beans:bean>

	<beans:bean id="rxnDefinitionPropertyResolver"
		class="org.lexgrid.loader.rrf.processor.support.DefaultDefinitionPropertyResolver">
		<beans:property name="individualIdSetter">
			<beans:bean
				class="org.lexgrid.loader.rxn.data.property.MrdefIndividualIdSetter" />
		</beans:property>
		<beans:property name="entityCodeResolver">
			<beans:bean
				class="org.lexgrid.loader.rxn.processor.support.RxnMrdefEntityCodeResolver">
				<beans:property name="mrconsoStagingDao">
					<beans:ref bean="mrconsoStagingDao" />
				</beans:property>
			</beans:bean>
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnCodingSchemeReader"
		class="org.springframework.batch.item.support.ListItemReader" scope="step">
		<beans:constructor-arg ref="rxnMrsabFactory" />
	</beans:bean>


	<beans:bean id="rxnconsoStagedReader"
		class="org.lexgrid.loader.reader.BufferedGroupItemReader" scope="step">
		<beans:property name="groupDiscriminator">
			<beans:bean
				class="org.lexgrid.loader.rxn.processor.support.RxnMrconsoEntityGroupDiscriminator" />
		</beans:property>
		<beans:property name="delegate">
			<beans:ref bean="rxnconsoSkippingReader" />
		</beans:property>
	</beans:bean>



	<beans:bean id="rxnCodingSchemeNameSetter"
		class="org.lexgrid.loader.rxn.data.codingscheme.RxnCodingSchemeNameSetter">
		<beans:property name="mrsabUtility">
			<beans:ref bean="rxnMrsabUtility" />
		</beans:property>
		<beans:property name="sab" value="${sab}" />
		<beans:property name="isoMap">
			<beans:ref bean="isoMap" />
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnEntityNamespaceResolver"
		class="org.lexgrid.loader.processor.support.SameAsCodingSchemeNameEntityNamespaceResolver">
		<beans:property name="codingSchemeIdSetter">
			<beans:ref local="rxnCodingSchemeNameSetter" />
		</beans:property>
	</beans:bean>



	<beans:bean id="registeringTasklet" parent="abstractLexEvsUtilityTasklet"
		class="org.lexgrid.loader.lexbigadmin.RegisteringTasklet">
		<beans:property name="codingSchemeIdSetter">
			<beans:ref local="rxnCodingSchemeNameSetter" />
		</beans:property>
	</beans:bean>

	<beans:bean id="indexingTasklet" parent="abstractLexEvsUtilityTasklet"
		class="org.lexgrid.loader.lexbigadmin.IndexingTasklet">
		<beans:property name="codingSchemeIdSetter">
			<beans:ref local="rxnCodingSchemeNameSetter" />
		</beans:property>
	</beans:bean>
	
<!-- 	<beans:bean id="abstractLexEvsUtilityTasklet" parent="loggingBean" abstract="true"
		class="org.lexgrid.loader.lexbigadmin.AbstractLexEvsUtilityTasklet">
		<beans:property name="databaseServiceManager" ref="databaseServiceManager" />
		<beans:property name="connectionManager" ref="defaultLexEvsDatabaseOperations" />
	</beans:bean> -->
	
	<beans:bean id="transitivityBuildingTasklet" parent="abstractLexEvsUtilityTasklet"
		class="org.lexgrid.loader.lexbigadmin.TransitivityBuildingTasklet">
		<beans:property name="codingSchemeIdSetter">
			<beans:ref local="rxnCodingSchemeNameSetter" />
		</beans:property>
	</beans:bean>

     <beans:bean id="introspectiveHardcodedValuesTasklet" parent="abstractIntrospectiveHardcodedValues"
		class="org.lexgrid.loader.rxn.hardcodedvalues.RxnHardcodedValuesFactory">
		<beans:property name="codingSchemeIdSetter">
			<beans:ref local="rxnCodingSchemeNameSetter" />
		</beans:property>
		<beans:property name="supportedAttributeTemplate">
			<beans:ref bean="cachingSupportedAttribuiteTemplate" />
		</beans:property>
		<beans:property name="databaseServiceManager" ref="databaseServiceManager"/>
	</beans:bean> 

	<beans:bean id="rxnDefaultPropertyProcessor" abstract="true">
		<beans:property name="codingSchemeIdSetter">
			<beans:ref local="rxnCodingSchemeNameSetter" />
		</beans:property>
		<beans:property name="supportedAttributeTemplate">
			<beans:ref bean="cachingSupportedAttribuiteTemplate" />
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnMrsabFactory" class="org.lexgrid.loader.reader.FactoryBeanReader">
		<beans:property name="delegate">
			<beans:ref bean="rxnsabReader" />
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnMrsabUtility"
		class="org.lexgrid.loader.rxn.data.codingscheme.RxnMrsabUtility">
		<beans:property name="mrsabList">
			<beans:ref local="rxnMrsabFactory" />
		</beans:property>
	</beans:bean>

	<beans:bean id="isoMap"
		class="edu.mayo.informatics.lexgrid.convert.directConversions.UmlsCommon.UMLSBaseCode"
		factory-method="getIsoMap" />

<!--     <beans:bean id="hibernateRrfPostProcessingDao"
		class="org.lexgrid.loader.rrf.dao.HibernateRrfPostProcessingDao"
		abstract="true">
		<beans:property name="sessionFactory">
			<beans:ref bean="sessionFactory" />
		</beans:property>
	</beans:bean> -->

<!-- 	<beans:bean id="mrrankFactoryBean" class="org.lexgrid.loader.reader.FactoryBeanReader">
		<beans:property name="delegate">
			<beans:ref bean="rxnrankReader" />
		</beans:property>
	</beans:bean>

	<beans:bean id="mrrankUtility"
		class="org.lexgrid.loader.rrf.data.property.DefaultMrrankUtility">
		<beans:property name="mrrankList">
			<beans:ref bean="mrrankFactoryBean" />
		</beans:property>
	</beans:bean>

	<beans:bean id="mrrankPropertyQualUtility"
		class="org.lexgrid.loader.rrf.data.property.PropertyQualifierMrrankUtility">
		<beans:property name="mrrankList">
			<beans:ref bean="mrrankFactoryBean" />
		</beans:property>
	</beans:bean> -->

	<beans:bean id="mrsatUtility"
		class="org.lexgrid.loader.rxn.data.property.RxnMrsatUtility">
		<beans:property name="mrsatMap">
			<beans:ref bean="mrsatUsageFactoryBean" />
		</beans:property>
	</beans:bean>

	<beans:bean id="mrsatUsageFactoryBean"
	class="org.lexgrid.loader.rxn.factory.RxnMrsatUsageFactory" />

<!--      <beans:bean id="propertyComparator"
		class="org.lexgrid.loader.rrf.data.property.MrconsoPropertyComparator">
		<beans:property name="mrrankUtility">
			<beans:ref bean="mrrankUtility" />
		</beans:property>
	</beans:bean> -->

	<beans:bean id="mrconsoStagingDao"
		class="org.lexgrid.loader.rxn.staging.RxnJdbcMrconsoStagingDao">
		<beans:property name="dataSource">
			<beans:ref bean="dataSource" />
		</beans:property>
		<beans:property name="mrsabUtility">
			<beans:ref bean="rxnMrsabUtility" />
		</beans:property>
		<beans:property name="prefix" value="${prefix}" />
	</beans:bean>

<!-- readers -->

	<beans:bean class="org.springframework.batch.core.scope.StepScope" />

	<beans:bean id="rxnconsoReader"
		class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<beans:property name="resource" value="${rrfDir}/RXNCONSO.RRF" />
		<beans:property name="lineMapper">
			<beans:bean
				class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<beans:property name="lineTokenizer">
					<beans:ref local="pipeTokenizer" />
				</beans:property>
				<beans:property name="fieldSetMapper">
					<beans:bean
						class="org.lexgrid.loader.rrf.fieldmapper.MrconsoFieldSetMapper" />
				</beans:property>
			</beans:bean>
		</beans:property>
		<beans:property name="saveState" value="true" />
		<beans:property name="encoding" value="UTF8" />
	</beans:bean>

	<beans:bean id="rxnhierReader"
		class="org.springframework.batch.item.file.FlatFileItemReader">
		<beans:property name="resource" value="${rrfDir}/RXNHIER.RRF" />
		<beans:property name="lineMapper">
			<beans:bean
				class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<beans:property name="lineTokenizer">
					<beans:ref local="pipeTokenizer" />
				</beans:property>
				<beans:property name="fieldSetMapper">
					<beans:bean
						class="org.lexgrid.loader.rrf.fieldmapper.MrhierFieldSetMapper" />
				</beans:property>
			</beans:bean>
		</beans:property>
		<beans:property name="saveState" value="true" />
		<beans:property name="encoding" value="UTF8" />
	</beans:bean>


	<beans:bean id="rxnstyReader"
		class="org.springframework.batch.item.file.FlatFileItemReader">
		<beans:property name="resource" value="${rrfDir}/RXNSTY.RRF" />
		<beans:property name="lineMapper">
			<beans:bean
				class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<beans:property name="lineTokenizer">
					<beans:ref local="pipeTokenizer" />
				</beans:property>
				<beans:property name="fieldSetMapper">
					<beans:bean
						class="org.lexgrid.loader.rrf.fieldmapper.MrstyFieldSetMapper" />
				</beans:property>
			</beans:bean>
		</beans:property>
		<beans:property name="saveState" value="true" />
		<beans:property name="encoding" value="UTF8" />
	</beans:bean>

	<beans:bean id="rxnsabReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		init-method="doOpen">
		<beans:property name="resource" value="${rrfDir}/RXNSAB.RRF" />
		<beans:property name="lineMapper">
			<beans:bean
				class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<beans:property name="lineTokenizer">
					<beans:ref local="pipeTokenizer" />
				</beans:property>
				<beans:property name="fieldSetMapper">
					<beans:bean
						class="org.lexgrid.loader.rrf.fieldmapper.MrsabFieldSetMapper" />
				</beans:property>
			</beans:bean>
		</beans:property>
		<beans:property name="saveState" value="true" />
		<beans:property name="encoding" value="UTF8" />
	</beans:bean>

	<beans:bean id="rxndefReader"
		class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<beans:property name="resource" value="${rrfDir}/RXNDEF.RRF" />
		<beans:property name="lineMapper">
			<beans:bean
				class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<beans:property name="lineTokenizer">
					<beans:ref local="pipeTokenizer" />
				</beans:property>
				<beans:property name="fieldSetMapper">
					<beans:bean
						class="org.lexgrid.loader.rrf.fieldmapper.MrdefFieldSetMapper" />
				</beans:property>
			</beans:bean>
		</beans:property>
		<beans:property name="saveState" value="true" />
		<beans:property name="encoding" value="UTF8" />
	</beans:bean>

	<beans:bean id="skippingMrhierReader"
		class="org.lexgrid.loader.reader.SkippingItemReader">
		<beans:property name="skipPolicy">
			<beans:bean
				class="org.lexgrid.loader.rrf.reader.support.MrhierHcdSkipPolicy" />
		</beans:property>
		<beans:property name="delegate">
			<beans:ref bean="rxnhierReader" />
		</beans:property>
	</beans:bean>

	<beans:bean id="rxndocReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		init-method="doOpen">
		<beans:property name="resource" value="${rrfDir}/RXNDOC.RRF" />
		<beans:property name="encoding" value="UTF8" />
		<beans:property name="lineMapper">
			<beans:bean
				class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<beans:property name="lineTokenizer">
					<beans:ref local="pipeTokenizer" />
				</beans:property>
				<beans:property name="fieldSetMapper">
					<beans:bean
						class="org.lexgrid.loader.rrf.fieldmapper.MrdocFieldSetMapper" />
				</beans:property>
			</beans:bean>
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnsatReader"
		class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<beans:property name="resource" value="${rrfDir}/RXNSAT.RRF" />
		<beans:property name="encoding" value="UTF8" />
		<beans:property name="lineMapper">
			<beans:bean
				class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<beans:property name="lineTokenizer">
					<beans:ref local="pipeTokenizer" />
				</beans:property>
				<beans:property name="fieldSetMapper">
					<beans:bean
						class="org.lexgrid.loader.rrf.fieldmapper.MrsatFieldSetMapper" />
				</beans:property>
			</beans:bean>
		</beans:property>
	</beans:bean>

<!-- 	<beans:bean id="rxnrankReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		init-method="doOpen">
		<beans:property name="resource" value="${rrfDir}/RXNRANK.RRF" />
		<beans:property name="encoding" value="UTF8" />
		<beans:property name="lineMapper">
			<beans:bean
				class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<beans:property name="lineTokenizer">
					<beans:ref local="pipeTokenizer" />
				</beans:property>
				<beans:property name="fieldSetMapper">
					<beans:bean
						class="org.lexgrid.loader.rrf.fieldmapper.MrrankFieldSetMapper" />
				</beans:property>
			</beans:bean>
		</beans:property>
		<beans:property name="strict" value="false" />
	</beans:bean> -->

	<beans:bean id="partitionedMrrelReader"
		class="org.lexgrid.loader.reader.SkippingItemReader" scope="step">
		<beans:property name="skipPolicy">
			<beans:bean
				class="org.lexgrid.loader.rrf.reader.support.MrrelCuiNumberBasedSkipPolicy">
				<beans:property name="cuiNumber"
					value="#{stepExecutionContext[rrfPartitionNumber]}" />
			</beans:bean>
		</beans:property>
		<beans:property name="delegate">
			<beans:ref bean="rxnrelReader" />
		</beans:property>
	</beans:bean>

	<beans:bean id="partitionedMrconsoReader"
		class="org.lexgrid.loader.reader.SkippingItemReader" scope="step">
		<beans:property name="skipPolicy">
			<beans:bean
				class="org.lexgrid.loader.rrf.reader.support.MrconsoCuiNumberBasedSkipPolicy">
				<beans:property name="cuiNumber"
					value="#{stepExecutionContext[rrfPartitionNumber]}" />
			</beans:bean>
		</beans:property>
		<beans:property name="delegate">
			<beans:ref bean="rxnconsoReader" />
		</beans:property>
	</beans:bean>

	<beans:bean id="partitionedMrsatReader"
		class="org.lexgrid.loader.reader.SkippingItemReader" scope="step">
		<beans:property name="skipPolicy">
			<beans:bean
				class="org.lexgrid.loader.rrf.reader.support.MrsatCuiNumberBasedSkipPolicy">
				<beans:property name="cuiNumber"
					value="#{stepExecutionContext[rrfPartitionNumber]}" />
			</beans:bean>
		</beans:property>
		<beans:property name="delegate">
			<beans:ref bean="rxnsatReader" />
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnrelReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		init-method="doOpen" scope="step">
		<beans:property name="resource" value="${rrfDir}/RXNREL.RRF" />
		<beans:property name="encoding" value="UTF8" />
		<beans:property name="lineMapper">
			<beans:bean
				class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<beans:property name="lineTokenizer">
					<beans:ref local="pipeTokenizer" />
				</beans:property>
				<beans:property name="fieldSetMapper">
					<beans:bean
						class="org.lexgrid.loader.rrf.fieldmapper.MrrelFieldSetMapper" />
				</beans:property>
			</beans:bean>
		</beans:property>
		<beans:property name="saveState" value="true" />
	</beans:bean>

	<beans:bean id="rxndocAssociationGroupReader"
		class="org.lexgrid.loader.reader.BufferedGroupItemReader">
		<beans:property name="delegate">
			<beans:ref local="onlyAssociationsSkippingMrdocReader" />
		</beans:property>
		<beans:property name="groupDiscriminator">
			<beans:bean
				class="org.lexgrid.loader.rrf.reader.support.MrdocDiscriminator" />
		</beans:property>
	</beans:bean>

	<beans:bean id="onlyAssociationsSkippingMrdocReader"
		class="org.lexgrid.loader.reader.SkippingItemReader">
		<beans:property name="skipPolicy">
			<beans:bean
				class="org.lexgrid.loader.rxn.reader.support.RxndocOnlyAssociationsSkipPolicy" />
		</beans:property>
		<beans:property name="delegate">
			<beans:ref local="rxndocReader" />
		</beans:property>
	</beans:bean>

	<beans:bean id="skippingMrdocReader"
		class="org.lexgrid.loader.reader.SkippingItemReader">
		<beans:property name="skipPolicy">
			<beans:bean
				class="org.lexgrid.loader.rrf.reader.support.MrdocRelationNameSkipPolicy" />
		</beans:property>
		<beans:property name="delegate">
			<beans:ref local="rxndocReader" />
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnrelGroupReader"
		class="org.lexgrid.loader.reader.BufferedGroupItemReader" abstract="true">
		<beans:property name="delegate">
			<beans:ref local="rxnrelReader" />
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnconsoGroupReader"
		class="org.lexgrid.loader.reader.BufferedGroupItemReader" abstract="true">
		<beans:property name="delegate">
			<beans:ref local="rxnconsoReader" />
		</beans:property>
	</beans:bean>

	<beans:bean id="pipeTokenizer"
		class="org.lexgrid.loader.rrf.reader.linetokenizer.NoQuotesDelimitedLineTokenizer">
		<beans:property name="delimiter" value="|" />
	</beans:bean>


	<beans:bean id="rxnconsoSkippingReader"
		class="org.lexgrid.loader.reader.SkippingItemReader" scope="step">
		<beans:property name="skipPolicy">
			<beans:bean
				class="org.lexgrid.loader.rxn.reader.support.RxnconsoSabSkipPolicy">
				<beans:property name="sab" value="${sab}" />
			</beans:bean>
		</beans:property>
		<beans:property name="delegate">
			<!--<beans:ref bean="partitionedMrrelReader" />-->
			<beans:ref bean="rxnconsoReader" />
		</beans:property>
	</beans:bean>


	<beans:bean id="rxnMrstyGroupReader"
		class="org.lexgrid.loader.reader.BufferedGroupItemReader">
		<beans:property name="groupDiscriminator">
			<beans:bean
				class="org.lexgrid.loader.rrf.reader.support.MrstyGroupDiscriminator" />
		</beans:property>
		<beans:property name="delegate">
			<beans:ref bean="rxnstyReader" />
		</beans:property>
		<!-- <beans:property name="maxBufferSize" value="100"/> -->
	</beans:bean>

	<beans:bean id="rxnMrrelSkippingReader"
		class="org.lexgrid.loader.reader.SkippingItemReader" scope="step">
		<beans:property name="skipPolicy">
			<beans:bean
				class="org.lexgrid.loader.rxn.reader.support.MrrelSabSkipPolicy">
				<beans:property name="sab" value="${sab}" />
			</beans:bean>
		</beans:property>
		<beans:property name="delegate">
			<!--<beans:ref bean="partitionedMrrelReader" />-->
			<beans:ref bean="rxnrelReader" />
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnMrdefSkippingReader"
		class="org.lexgrid.loader.reader.SkippingItemReader" scope="step">
		<beans:property name="skipPolicy">
			<beans:bean
				class="org.lexgrid.loader.rxn.reader.support.MrdefSabSkipPolicy">
				<beans:property name="sab" value="${sab}" />
			</beans:bean>
		</beans:property>
		<beans:property name="delegate">
			<beans:ref bean="rxndefReader" />
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnMrsatSkippingReader"
		class="org.lexgrid.loader.reader.SkippingItemReader">
		<beans:property name="skipPolicy">
			<beans:bean class="org.lexgrid.loader.rxn.reader.support.MrsatSkipPolicy">
				<beans:property name="sab" value="${sab}" />
				<beans:property name="mrsatUtility">
					<beans:ref bean="mrsatUtility" />
				</beans:property>
				<beans:property name="codingSchemeNameSetter">
					<beans:ref bean="rxnCodingSchemeNameSetter" />
				</beans:property>
				<beans:property name="entityCodeResolver">
					<beans:bean
						class="org.lexgrid.loader.rxn.processor.support.RxnMrsatEntityCodeResolver" />
				</beans:property>
				<beans:property name="databaseServiceManager">
					<beans:ref bean="databaseServiceManager"/>
				</beans:property>

			</beans:bean>
		</beans:property>
		<beans:property name="delegate">
			<beans:ref bean="rxnsatReader" />
		</beans:property>
	</beans:bean>

	<beans:bean id="rxnMrstySkippingReader"
		class="org.lexgrid.loader.reader.SkippingItemReader">
		<beans:property name="skipPolicy">
			<beans:bean class="org.lexgrid.loader.rxn.reader.support.RxnMrstySkipPolicy">
				<beans:property name="sab" value="${sab}" />			
				<beans:property name="codingSchemeNameSetter">
					<beans:ref bean="rxnCodingSchemeNameSetter" />
				</beans:property>
				<beans:property name="entityCodeResolver">
					<beans:bean
						class="org.lexgrid.loader.rxn.processor.support.RxnMrstyEntityCodeResolver" />
				</beans:property>
				<beans:property name="databaseServiceManager">
					<beans:ref bean="databaseServiceManager"/>
				</beans:property>
			</beans:bean>
		</beans:property>
		<beans:property name="delegate">
			<beans:ref bean="rxnstyReader" />
		</beans:property>
	</beans:bean>


	<beans:bean id="rxnSkippingMrhierReader"
		class="org.lexgrid.loader.reader.SkippingItemReader">
		<beans:property name="skipPolicy">
			<beans:bean
				class="org.lexgrid.loader.rxn.reader.support.RxnMrhierHcdSabSkipPolicy">
				<beans:property name="sab" value="${sab}" />
			</beans:bean>
		</beans:property>
		<beans:property name="delegate">
			<beans:ref bean="rxnhierReader" />
		</beans:property>
	</beans:bean>

</beans:beans>
