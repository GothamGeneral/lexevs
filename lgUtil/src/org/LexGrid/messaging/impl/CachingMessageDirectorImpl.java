/*
 * Copyright: (c) 2004-2009 Mayo Foundation for Medical Education and 
 * Research (MFMER). All rights reserved. MAYO, MAYO CLINIC, and the
 * triple-shield Mayo logo are trademarks and service marks of MFMER.
 *
 * Except as contained in the copyright notice above, or as used to identify 
 * MFMER as the author of this software, the trade names, trademarks, service
 * marks, or product names of the copyright holder shall not be used in
 * advertising, promotion or otherwise in connection with this software without
 * prior written authorization of the copyright holder.
 * 
 * Licensed under the Eclipse Public License, Version 1.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 * 		http://www.eclipse.org/legal/epl-v10.html
 * 
 */
package org.LexGrid.messaging.impl;

import java.util.ArrayList;
import java.util.Collection;

import org.LexGrid.messaging.CachingMessageDirectorIF;
import org.LexGrid.messaging.LgMessageDirectorIF;

/**
 * The class implements the CachingMessageDirectorIF interface and is used to
 * log the messages generated by programs into a Collection so they can be
 * easily retrieved for later use. This takes in another LgMessageDirectorIF -
 * all messages are passed down to this message director for further action.
 * 
 * @author <A HREF="mailto:sharma.deepak2@mayo.edu">Deepak Sharma</A>
 * @author <A HREF="mailto:kanjamala.pradip@mayo.edu"> Pradip Kanjamala</A>
 * @author <A HREF="mailto:armbrust.daniel@mayo.edu"> Dan Armbrust</A>
 */
public class CachingMessageDirectorImpl implements CachingMessageDirectorIF {
    protected LgMessageDirectorIF baseMessageDirector_ = null;
    protected Collection debugMsgs = new ArrayList();
    protected Collection infoMsgs = new ArrayList();
    protected Collection warnMsgs = new ArrayList();
    protected Collection errorMsgs = new ArrayList();
    protected Collection fatalMsgs = new ArrayList();

    private String DEBUG_STR = "Debug: ";
    private String INFO_STR = "Info: ";
    private String WARN_STR = "Warn: ";
    private String ERROR_STR = "Error: ";
    private String FATAL_STR = "Fatal: ";

    public CachingMessageDirectorImpl(LgMessageDirectorIF msgDirector) {
        this.baseMessageDirector_ = msgDirector;
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * edu.mayo.informatics.resourcereader.core.impl.ResourceLoggerImpl#debug
     * (java.lang.Object)
     */
    public String debug(String message) {
        addMsg(DEBUG, message);
        return baseMessageDirector_.debug(message);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * edu.mayo.informatics.resourcereader.core.impl.ResourceLoggerImpl#error
     * (java.lang.Object, java.lang.Throwable)
     */
    public String error(String message, Throwable cause) {
        addMsg(ERROR, message, cause.getMessage());
        return baseMessageDirector_.error(message, cause);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * edu.mayo.informatics.resourcereader.core.impl.ResourceLoggerImpl#error
     * (java.lang.Object)
     */
    public String error(String message) {
        addMsg(ERROR, message);

        return baseMessageDirector_.error(message);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * edu.mayo.informatics.resourcereader.core.impl.ResourceLoggerImpl#fatal
     * (java.lang.Object, java.lang.Throwable)
     */
    public String fatal(String message, Throwable cause) {

        addMsg(FATAL, message, cause.getMessage());

        return baseMessageDirector_.fatal(message, cause);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * edu.mayo.informatics.resourcereader.core.impl.ResourceLoggerImpl#fatal
     * (java.lang.Object)
     */
    public String fatal(String message) {
        addMsg(FATAL, message);

        return baseMessageDirector_.fatal(message);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * edu.mayo.informatics.resourcereader.core.impl.ResourceLoggerImpl#info
     * (java.lang.Object)
     */
    public String info(String message) {

        addMsg(INFO, message);

        return baseMessageDirector_.info(message);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * edu.mayo.informatics.resourcereader.core.impl.ResourceLoggerImpl#warn
     * (java.lang.Object, java.lang.Throwable)
     */
    public String warn(String message, Throwable cause) {
        addMsg(WARN, message, cause.getMessage());

        return baseMessageDirector_.warn(message, cause);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * edu.mayo.informatics.resourcereader.core.impl.ResourceLoggerImpl#warn
     * (java.lang.Object)
     */
    public String warn(String message) {
        addMsg(WARN, message);

        return baseMessageDirector_.warn(message);
    }

    private void addMsg(int level, String msg, String exceptionMsg) {

        switch (level) {
        case DEBUG:
            debugMsgs.add(getLevelStr(level) + msg + ";\n" + exceptionMsg);
            break;
        case INFO:
            infoMsgs.add(getLevelStr(level) + msg + ";\n" + exceptionMsg);
            break;
        case WARN:
            warnMsgs.add(getLevelStr(level) + msg + ";\n" + exceptionMsg);
            break;
        case ERROR:
            errorMsgs.add(getLevelStr(level) + msg + ";\n" + exceptionMsg);
            break;
        case FATAL:
            fatalMsgs.add(getLevelStr(level) + msg + ";\n" + exceptionMsg);
            break;
        default:
            errorMsgs.add(getLevelStr(level) + msg + ";\n" + exceptionMsg);
            break;
        }
    }

    private String getLevelStr(int level) {
        String levelStr = WARN_STR;

        switch (level) {
        case 0:
            levelStr = DEBUG_STR;
            break;
        case 1:
            levelStr = INFO_STR;
            break;
        case 2:
            levelStr = WARN_STR;
            break;
        case 3:
            levelStr = ERROR_STR;
            break;
        case 4:
            levelStr = FATAL_STR;
            break;
        default:
            levelStr = WARN_STR;
            break;
        }

        return levelStr;
    }

    private void addMsg(int level, String msg) {
        addMsg(level, msg, "");
    }

    public Collection getAllMsgs() {
        Collection allMsgs = new ArrayList();

        allMsgs.addAll(debugMsgs);
        allMsgs.addAll(infoMsgs);
        allMsgs.addAll(warnMsgs);
        allMsgs.addAll(errorMsgs);
        allMsgs.addAll(fatalMsgs);

        return allMsgs;
    }

    public long getAllMsgsCount() {
        try {
            return getAllMsgs().size();
        } catch (Exception e) {
        }

        return -1;
    }

    public Collection getMsgs(int level) {
        switch (level) {
        case DEBUG:
            return debugMsgs;
        case INFO:
            return infoMsgs;
        case WARN:
            return warnMsgs;
        case ERROR:
            return errorMsgs;
        case FATAL:
            return fatalMsgs;
        default:
            return getAllMsgs();
        }

    }

    public long getMsgsCount(int level) {
        try {
            return getMsgs(level).size();
        } catch (Exception e) {
            return -1;
        }
    }

    public Collection getAllMsgsAtAndAbove(int level) {
        Collection msgs = new ArrayList();
        switch (level) {
        case DEBUG:
            msgs.addAll(debugMsgs);
        case INFO:
            msgs.addAll(infoMsgs);
        case WARN:
            msgs.addAll(warnMsgs);
        case ERROR:
            msgs.addAll(errorMsgs);
        case FATAL:
            msgs.addAll(fatalMsgs);
        default:
            ;
        }
        return msgs;
    }

    public long getAllMsgsAtAndAboveCount(int level) {
        try {
            return getAllMsgsAtAndAbove(level).size();

        } catch (Exception e) {
            return -1;
        }

    }

    public void clearLogCollection(int log_level) {
        switch (log_level) {
        case DEBUG:
            debugMsgs.clear();
            break;
        case INFO:
            infoMsgs.clear();
            break;
        case WARN:
            warnMsgs.clear();
            break;
        case ERROR:
            errorMsgs.clear();
            break;
        case FATAL:
            fatalMsgs.clear();
            break;

        }

    }

    public void clearAllLogs() {
        debugMsgs.clear();
        infoMsgs.clear();
        warnMsgs.clear();
        errorMsgs.clear();
        fatalMsgs.clear();

    }

    public void busy() {
    }

    public void fatalAndThrowException(String message) throws Exception {
        fatalAndThrowException(message, null);

    }

    public void fatalAndThrowException(String message, Throwable sourceException) throws Exception {
        fatal(message, sourceException);
        baseMessageDirector_.fatalAndThrowException(message, sourceException);
        throw new Exception(message, sourceException);
    }
}