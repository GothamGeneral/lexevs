<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL MAP 2.0//EN" 
	"http://www.ibatis.com/dtd/sql-map-2.dtd">
<sqlMap namespace="Association">

	<typeAlias alias="node" type="org.lexevs.dao.database.access.association.model.Node"/>
	<typeAlias alias="triple" type="org.lexevs.dao.database.access.association.model.Triple"/>
	<typeAlias alias="associatedConcept" type="org.lexevs.dao.database.ibatis.codednodegraph.model.EntityReferencingAssociatedConcept"/>
	<typeAlias alias="associationQualification" type="org.LexGrid.LexBIG.DataModel.Core.NameAndValue"/>
	<typeAlias alias="associationTarget" type="org.lexevs.dao.database.ibatis.association.parameter.InsertOrUpdateAssociationTargetBean"/>

	<resultMap id="nodeResult" class="node">
		<result property="entityCode" column="entityCode" />
		<result property="entityCodeNamespace" column="entityCodeNamespace" />
	</resultMap>
	
	<resultMap id="countResult" class="java.util.HashMap">
		<result property="key" column="associationName" />
		<result property="value" column="relationshipsCount" javaType="int" />
	</resultMap>
	
	<resultMap id="tripleResult" class="triple">
		<result property="sourceEntityCode" column="sourceEntityCode" />
		<result property="sourceEntityNamespace" column="sourceEntityCodeNamespace" />
		<result property="targetEntityCode" column="targetEntityCode" />
		<result property="targetEntityNamespace" column="targetEntityCodeNamespace" />
		<result property="associationPredicateId" column="associationPredicateGuid" />
	</resultMap>
	
	<resultMap id="associatedConceptResult" class="associatedConcept" groupBy="guid">
		<result property="guid" column="entityAssnsGuid" />
		<result property="entityGuid" column="entityGuid" />
		<result property="code" column="entityCode" />
		<result property="codeNamespace" column="entityCodeNamespace" />
		<result property="entityDescription.content" column="description" />
		<result property="codingSchemeURI" column="codingSchemeURI" />
		<result property="codingSchemeVersion" column="representsVersion" />
		<result property="codingSchemeName" column="codingSchemeName" />
		<result property="associationQualification" resultMap="Association.associationQualificationResult"/>
	</resultMap>

	<resultMap id="associationQualificationResult" class="associationQualification">
		<result property="name" column="qualifierName" />
		<result property="content" column="qualifierValue" />
	</resultMap>
	
	<resultMap id="associationTargetEntry" class="associationTarget" groupBy="uid">
		<result property="uid" column="entityAssnsGuid" />
		<result property="associationPredicateUId" column="associationPredicateGuid" />
		<result property="associationSource.sourceEntityCode" column="sourceEntityCode" />
		<result property="associationSource.sourceEntityCodeNamespace" column="sourceEntityCodeNamespace" />
		<result property="associationTarget.targetEntityCode" column="targetEntityCode" />
		<result property="associationTarget.targetEntityCodeNamespace" column="targetEntityCodeNamespace" />
		<result property="associationTarget.associationInstanceId" column="associationInstanceId" />
		<result property="associationTarget.isDefining" column="isDefining" />
		<result property="associationTarget.isInferred" column="isInferred" />
		<result property="associationTarget.isActive" column="isActive" />
		<result property="associationTarget.owner" column="owner" />
		<result property="associationTarget.status" column="status" />
		<result property="associationTarget.effectiveDate" column="effectiveDate" />
		<result property="associationTarget.expirationDate" column="expirationDate" />
		<result property="entryStateUId" column="entryStateGuid" />
		<result property="assnQualsAndUsageContextList" resultMap="Association.qualContextResult"/>
	</resultMap>

	<select id="getConceptReferenceFromEntityAssnsToEntityUid" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterCollection"
		remapResults="true" 
		resultMap="Entity.conceptReferenceResult">
		SELECT

			<isEqual property="param1" compareValue="SUBJECT">
				eate.sourceEntityCode as entityCode,
				eate.sourceEntityCodeNamespace as entityCodeNamespace
			</isEqual>
			<isEqual property="param1" compareValue="OBJECT">
				eate.targetEntityCode as entityCode,
				eate.targetEntityCodeNamespace as entityCodeNamespace
			</isEqual>
			
		FROM
			$prefix$entityAssnsToEntity eate
		
		WHERE
			eate.entityAssnsGuid IN ( <iterate property="param2" conjunction=",">#param2[]#</iterate> )
	</select>
	
	
	<select id="getAssociatedConcpetFromEntityAssnsToEntityUid" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterCollection"
		remapResults="true" resultMap="Association.associatedConceptResult">
		SELECT
			eate.entityAssnsGuid,
			entity.entityGuid,
			entity.description,
			codingScheme.codingSchemeURI,
			codingScheme.representsVersion,
			codingScheme.codingSchemeName,
			<isEqual property="param1" compareValue="SUBJECT">
				eate.sourceEntityCode as entityCode,
				eate.sourceEntityCodeNamespace as entityCodeNamespace,
			</isEqual>
			<isEqual property="param1" compareValue="OBJECT">
				eate.targetEntityCode as entityCode,
				eate.targetEntityCodeNamespace as entityCodeNamespace,
			</isEqual>
			quals.qualifierName,
			quals.qualifierValue
		FROM
			$prefix$entityAssnsToEntity eate
		LEFT JOIN
			$prefix$entity entity
		ON (
			<isEqual property="param1" compareValue="SUBJECT">
				eate.sourceEntityCode = entity.entityCode
				AND
				eate.sourceEntityCodeNamespace = entity.entityCodeNamespace
			</isEqual>
			<isEqual property="param1" compareValue="OBJECT">
				eate.targetEntityCode = entity.entityCode
				AND
				eate.targetEntityCodeNamespace = entity.entityCodeNamespace
			</isEqual>
			)
		LEFT JOIN
			$prefix$codingScheme codingScheme
		ON (entity.codingSchemeGuid = codingScheme.codingSchemeGuid)
		
		LEFT JOIN
			$prefix$entityAssnQuals quals
		ON (eate.entityAssnsGuid = quals.referenceGuid)
		
		WHERE
			eate.entityAssnsGuid IN ( <iterate property="param2" conjunction=",">#param2[]#</iterate> )
	</select>

	<select id="getAccociationInstanceKey" remapResults="true" resultClass="string">
		SELECT
			eae.entityAssnsGuid
		FROM 
			$prefix$entityAssnsToEntity eae
		JOIN
			$prefix$associationPredicate ap
		ON 
			eae.associationPredicateGuid =
			ap.associationPredicateGuid
		JOIN
			$prefix$relation rel
		ON
			ap.relationGuid =
			rel.relationGuid
		WHERE
			rel.codingSchemeGuid = 
			#param1#
		AND
			eae.associationInstanceId = 
			#param2#
	</select>
	
	<select id="getAllTriplesOfCodingScheme" remapResults="true"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultMap="Association.tripleResult">
		SELECT
			eae.sourceEntityCode,
			eae.sourceEntityCodeNamespace,
			eae.targetEntityCode,
			eae.targetEntityCodeNamespace,
			eae.associationPredicateGuid
		FROM 
			$prefix$entityAssnsToEntity eae
		JOIN
			$prefix$associationPredicate ap
		ON 
			eae.associationPredicateGuid =
			ap.associationPredicateGuid
		JOIN
			$prefix$relation rel
		ON
			ap.relationGuid =
			rel.relationGuid
		WHERE
			rel.codingSchemeGuid = 
			#param1#
		AND
			eae.associationPredicateGuid =
			#param2#	
	</select>
	
     <insert id="insertEntityAssnsToEntity" parameterClass="org.lexevs.dao.database.ibatis.association.parameter.InsertOrUpdateAssociationTargetBean">
		INSERT INTO $prefix$entityAssnsToEntity (
			entityAssnsGuid,
			associationPredicateGuid,
			sourceEntityCode,
			sourceEntityCodeNamespace,
			targetEntityCode,
			targetEntityCodeNamespace,
			associationInstanceId,
			isDefining,
			isInferred,
			isActive,
			owner,
			status,
			effectiveDate,
			expirationDate,
			entryStateGuid
		) VALUES (
			#uid#, 
			#associationPredicateUId#,
			#associationSource.sourceEntityCode#, 
			#associationSource.sourceEntityCodeNamespace#, 
			#associationTarget.targetEntityCode#, 
			#associationTarget.targetEntityCodeNamespace#, 
			#associationTarget.associationInstanceId#, 
			#associationTarget.isDefining#, 
			#associationTarget.isInferred#, 
			#associationTarget.isActive#,
			#associationTarget.owner#,
			#associationTarget.status#,
			#associationTarget.effectiveDate#,
			#associationTarget.expirationDate#,
			#entryStateUId#
		)
  </insert>
  
   <insert id="insertTransitiveClosure" parameterClass="org.lexevs.dao.database.ibatis.association.parameter.InsertTransitiveClosureBean">
		INSERT INTO $prefix$entityAssnsToEntityTr (
			entityAssnsTrGuid,
			associationPredicateGuid,
			sourceEntityCode,
			sourceEntityCodeNamespace,
			targetEntityCode,
			targetEntityCodeNamespace
		) VALUES (
			#uid#, 
			#associationPredicateUId#,
			#sourceEntityCode#, 
			#sourceEntityCodeNamespace#, 
			#targetEntityCode#, 
			#targetEntityCodeNamespace#
		)
  </insert>

	<sql id="getEntityAssnsToEntityUidsFragment">
		FROM
			$prefix$entityAssnsToEntity eate
		INNER JOIN
			$prefix$associationPredicate ap
		ON
			(ap.associationPredicateGuid = eate.associationPredicateGuid)
		INNER JOIN
			$prefix$relation rel
		ON
			(rel.relationGuid = ap.relationGuid)
		LEFT JOIN
			$prefix$entityAssnQuals quals
		ON
			(eate.entityAssnsGuid = quals.referenceGuid)
			
		<isEqual property="needsEntityJoin" compareValue="true">
		LEFT JOIN
			$prefix$entity entity
		ON
			(
			<isEqual property="tripleNode" compareValue="SUBJECT">
				eate.targetEntityCode = entity.entityCode
				AND
				eate.targetEntityCodeNamespace = entity.entityCodeNamespace
			</isEqual>
			<isEqual property="tripleNode" compareValue="OBJECT">
				eate.sourceEntityCode = entity.entityCode
				AND
				eate.sourceEntityCodeNamespace = entity.entityCodeNamespace
			</isEqual>
			)
		LEFT JOIN
			$prefix$entityType entityType
		ON
			(entity.entityGuid = entityType.entityGuid)
		</isEqual>
			
		WHERE
			rel.codingSchemeGuid = #codingSchemeUid#
			
		<isPropertyAvailable property="relationsContainerName" prepend="AND">
			<isNotNull property="relationsContainerName">
			rel.containerName = #relationsContainerName#
			</isNotNull>
		</isPropertyAvailable>

		<isPropertyAvailable property="associationPredicateUid">
			<isNotNull property="associationPredicateUid" prepend="AND">
			ap.associationPredicateGuid = #associationPredicateUid#
			</isNotNull>
		</isPropertyAvailable>

		<isNotEmpty property="associationQualifiers" prepend="AND">
			(
			<iterate property="associationQualifiers" conjunction="AND">
				(
				quals.qualifierName = #associationQualifiers[].qualifierName#
				<isNotEmpty property="associationQualifiers[].qualifierValue">
					AND
					quals.qualifierValue = #associationQualifiers[].qualifierValue#
			</isNotEmpty>
				)
			</iterate>
			)
		</isNotEmpty>

		<isNotEmpty property="associations" prepend="AND">
			(
			<iterate property="associations" conjunction="OR">
				ap.associationName = #associations[]#
			</iterate>
			)
		</isNotEmpty>

		<isEqual property="tripleNode" compareValue="SUBJECT" prepend="AND">
			eate.sourceEntityCode = #entityCode#
			<isNotNull property="entityCodeNamespace" prepend="AND">
				eate.sourceEntityCodeNamespace = #entityCodeNamespace#
			</isNotNull>
		</isEqual>
		<isEqual property="tripleNode" compareValue="OBJECT" prepend="AND">
			eate.targetEntityCode = #entityCode#
			<isNotNull property="entityCodeNamespace" prepend="AND">
				eate.targetEntityCodeNamespace = #entityCodeNamespace#
			</isNotNull>
		</isEqual>

		<isNotEmpty property="mustHaveCodes" prepend="AND">
			(
			<iterate property="mustHaveCodes" conjunction="OR">
				<isEqual property="tripleNode" compareValue="SUBJECT">
					(
					eate.targetEntityCode = #mustHaveCodes[].code#
					<isNotNull property="mustHaveCodes[].namespace" prepend="AND">
						eate.targetEntityCodeNamespace = #mustHaveCodes[].namespace#
					</isNotNull>
					)
				</isEqual>
				<isEqual property="tripleNode" compareValue="OBJECT">
					(
					eate.sourceEntityCode = #mustHaveCodes[].code#
					<isNotNull property="mustHaveCodes[].namespace" prepend="AND">
						eate.sourceEntityCodeNamespace = #mustHaveCodes[].namespace#
					</isNotNull>
					)
				</isEqual>
			</iterate>
			)
		</isNotEmpty>
		<isNotEmpty property="mustHaveNamespaces" prepend="AND">
			(
			<iterate property="mustHaveNamespaces" conjunction="OR">
				<isEqual property="tripleNode" compareValue="SUBJECT">
					(
					eate.targetEntityCodeNamespace = #mustHaveNamespaces[]#
					)
				</isEqual>
				<isEqual property="tripleNode" compareValue="OBJECT">
					(
					eate.sourceEntityCodeNamespace = #mustHaveNamespaces[]#
					)
				</isEqual>
			</iterate>
			)
		</isNotEmpty>
		<isNotEmpty property="mustHaveEntityTypes" prepend="AND">
			(
			<iterate property="mustHaveEntityTypes" conjunction="OR">
				entityType.entityType = #mustHaveEntityTypes[]#
			</iterate>
			)
		</isNotEmpty>
		<isNotNull property="restrictToAnonymous" prepend="AND">
			entity.isAnonymous = #restrictToAnonymous#
		</isNotNull>
	</sql>
	
	<sql id="getRelationshipsFragment">
		INNER JOIN
			$prefix$associationPredicate ap
		ON
			(ap.associationPredicateGuid = eate.associationPredicateGuid)
		INNER JOIN
			$prefix$relation rel
		ON
			(rel.relationGuid = ap.relationGuid)
			
		<isEqual property="needsEntityJoin" compareValue="true">
		LEFT JOIN
			$prefix$entity sourceEntity
		ON
			(
				eate.sourceEntityCode = sourceEntity.entityCode
				AND
				eate.sourceEntityCodeNamespace = sourceEntity.entityCodeNamespace
			)
		LEFT JOIN
			$prefix$entityType sourceEntityType
		ON
			(sourceEntity.entityGuid = sourceEntityType.entityGuid)

		LEFT JOIN
			$prefix$entity targetEntity
		ON
			(
				eate.targetEntityCode = targetEntity.entityCode
				AND
				eate.targetEntityCodeNamespace = targetEntity.entityCodeNamespace
			)
		LEFT JOIN
			$prefix$entityType targetEntityType
		ON
			(targetEntity.entityGuid = targetEntityType.entityGuid)
		</isEqual>
		
		WHERE
			rel.codingSchemeGuid = #codingSchemeUid#

		<isNotNull property="relationsContainerName" prepend="AND">
			rel.containerName = #relationsContainerName#
		</isNotNull>
		
		<isNotEmpty property="associations" prepend="AND">
			(
			<iterate property="associations" conjunction="OR">
				ap.associationName = #associations[]#
			</iterate>
			)
		</isNotEmpty>

		<isNotNull property="sourceCode" prepend="AND">
			eate.sourceEntityCode = #sourceCode#
		</isNotNull>
		<isNotNull property="sourceNamespace" prepend="AND">
			eate.sourceEntityCodeNamespace = #sourceNamespace#
		</isNotNull>
		<isNotNull property="targetCode" prepend="AND">
			eate.targetEntityCode = #targetCode#
		</isNotNull>
		<isNotNull property="targetNamespace" prepend="AND">
			eate.targetEntityCodeNamespace = #targetNamespace#
		</isNotNull>
		
		<isNotEmpty property="mustHaveSourceCodes" prepend="AND">
			(
			<iterate property="mustHaveSourceCodes" conjunction="OR">
				(
					eate.sourceEntityCode = #mustHaveSourceCodes[].code#
					<isNotEmpty property="mustHaveSourceCodes[].namespace" prepend="AND">
						eate.sourceEntityCodeNamespace = #mustHaveSourceCodes[].namespace#
					</isNotEmpty>
				)
			</iterate>
			)
		</isNotEmpty>
		
		<isNotEmpty property="mustHaveTargetCodes" prepend="AND">
			(
			<iterate property="mustHaveTargetCodes" conjunction="OR">
				(
					eate.targetEntityCode = #mustHaveTargetCodes[].code#
					<isNotEmpty property="mustHaveTargetCodes[].namespace" prepend="AND">
						eate.targetEntityCodeNamespace = #mustHaveTargetCodes[].namespace#
					</isNotEmpty>
				)
			</iterate>
			)
		</isNotEmpty>
		<isNotEmpty property="mustHaveSourceNamespaces" prepend="AND">
			(
			<iterate property="mustHaveSourceNamespaces" conjunction="OR">
					(
					eate.sourceEntityCodeNamespace = #mustHaveSourceNamespaces[]#
					)
			</iterate>
			)
		</isNotEmpty>
		<isNotEmpty property="mustHaveTargetNamespaces" prepend="AND">
			(
			<iterate property="mustHaveTargetNamespaces" conjunction="OR">
					(
					eate.targetEntityCodeNamespace = #mustHaveTargetNamespaces[]#
					)
			</iterate>
			)
		</isNotEmpty>
		
		<isNotEmpty property="mustHaveEntityTypes" prepend="AND">
			(
				(
				<iterate property="mustHaveEntityTypes" conjunction="OR">
					sourceEntityType.entityType = #mustHaveEntityTypes[]#
				</iterate>
				)
				AND
				(
				<iterate property="mustHaveEntityTypes" conjunction="OR">
					targetEntityType.entityType = #mustHaveEntityTypes[]#
				</iterate>
				)	
			)
		</isNotEmpty>
		
		<isNotNull property="restrictToAnonymous" prepend="AND">
			(
			sourceEntity.isAnonymous = #restrictToAnonymous#
			AND
			targetEntity.isAnonymous = #restrictToAnonymous#
			)
		</isNotNull>
	</sql>
	
	<sql id="getEntityAssnsToEntityRelationships">
		SELECT DISTINCT
			eate.associationPredicateGuid
		FROM
			$prefix$entityAssnsToEntity eate
		LEFT JOIN
			$prefix$entityAssnQuals quals
		ON
			(eate.entityAssnsGuid = quals.referenceGuid)
		<include refid="getRelationshipsFragment"/>
	
		<isNotEmpty property="associationQualifiers" prepend="AND">
			(
			<iterate property="associationQualifiers" conjunction="AND">
				(
				quals.qualifierName = #associationQualifiers[].qualifierName#
				<isNotEmpty property="associationQualifiers[].qualifierValue">
					AND
					quals.qualifierValue = #associationQualifiers[].qualifierValue#
			</isNotEmpty>
				)
			</iterate>
			)
		</isNotEmpty>

	</sql>
	
	<sql id="getEntityAssnsToEntityTrRelationships">
		SELECT DISTINCT
			eate.associationPredicateGuid
		FROM
			$prefix$entityAssnsToEntityTr eate
		<include refid="getRelationshipsFragment"/>
	</sql>
	
	<select id="getCodeRelationships"
				parameterClass="org.lexevs.dao.database.ibatis.association.parameter.GetCodeRelationshipsBean"
				remapResults="true"
				resultClass="string">
		<include refid="getEntityAssnsToEntityRelationships"/>
	
		<isEqual property="useTransitive" compareValue="true">
			UNION
			<include refid="getEntityAssnsToEntityTrRelationships"/>
		</isEqual>
	</select>
	
	<select id="getRootEntityAssnsToEntityUids"
				parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterCollection"
				remapResults="true"
				resultMap="Entity.conceptReferenceResult">
		SELECT DISTINCT
			eate1.sourceEntityCode AS entityCode,
			eate1.sourceEntityCodeNamespace AS entityCodeNamespace
		FROM
			$prefix$entityAssnsToEntity eate1
		
		LEFT JOIN
			$prefix$entityAssnsToEntity eate2
		ON (
			eate1.sourceEntityCode = eate2.targetEntityCode
	
			<!-- 
			AND
			eate2.sourceEntityCodeNamespace = eate2.TargetEntityCodeNamespace
			-->
			<isEqual property="param1" compareValue="INDIVIDUALLY">
			AND
			eate1.associationPredicateGuid = eate2.associationPredicateGuid
			</isEqual>
			
			)
		WHERE
			eate2.entityAssnsGuid IS NULL	
	
			<isNotEmpty property="param2" prepend="AND">
				eate1.associationPredicateGuid IN ( <iterate property="param2" conjunction=",">#param2[]#</iterate> )
			</isNotEmpty>	
		
	</select>
	
	<select id="getTailEntityAssnsToEntityUids"
				parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterCollection"
				remapResults="true"
				resultMap="Entity.conceptReferenceResult">
		SELECT DISTINCT
			eate1.targetEntityCode AS entityCode,
			eate1.targetEntityCodeNamespace AS entityCodeNamespace
		FROM
			$prefix$entityAssnsToEntity eate1
		
		LEFT JOIN
			$prefix$entityAssnsToEntity eate2
		ON (
			eate1.targetEntityCode = eate2.sourceEntityCode
			<!--
			AND
			eate1.targetEntityCodeNamespace = eate2.sourceEntityCodeNamespace
			
			NOT SURE IF THIS IS NEEDED OR NOT
			-->
			<isEqual property="param1" compareValue="INDIVIDUALLY">
			AND
			eate1.associationPredicateGuid = eate2.associationPredicateGuid
			</isEqual>
			
			)
		WHERE
			eate2.entityAssnsGuid IS NULL	
	
			<isNotEmpty property="param2" prepend="AND">
				eate1.associationPredicateGuid IN ( <iterate property="param2" conjunction=",">#param2[]#</iterate> )
			</isNotEmpty>	
			
	</select>
  
  	<select id="getEntityAssnsToEntityUids"
				parameterClass="org.lexevs.dao.database.ibatis.association.parameter.GetEntityAssnUidsBean"
				resultClass="string">
		SELECT DISTINCT 
			(eate.entityAssnsGuid)
		<include refid="getEntityAssnsToEntityUidsFragment"/>
	</select>
	
	<select id="getEntityAssnsToEntityUidsCount"
				parameterClass="org.lexevs.dao.database.ibatis.association.parameter.GetEntityAssnUidsCountBean"
				resultMap="countResult">
		SELECT 
			COUNT(eate.associationPredicateGuid) AS relationshipsCount,
			ap.associationName AS associationName
		<include refid="getEntityAssnsToEntityUidsFragment"/>
		GROUP BY
			associationName
	</select>
	
	<select id="getDistinctSources" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
		remapResults="true" 
		resultMap="nodeResult">
		SELECT DISTINCT
			sourceEntityCode AS entityCode,
			sourceEntityCodeNamespace AS entityCodeNamespace
		FROM 
			$prefix$entityAssnsToEntity
		WHERE
			associationPredicateGuid = #param1#
	</select>
	
	<select id="getTargetsOfSource" 
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple"
		remapResults="true" 
		resultMap="nodeResult">
		SELECT
			targetEntityCode AS entityCode,
			targetEntityCodeNamespace AS entityCodeNamespace
		FROM 
			$prefix$entityAssnsToEntity
		WHERE
			associationPredicateGuid = #param1#
		AND
			sourceEntityCode = #param2#
		AND
			sourceEntityCodeNamespace = #param3#		
	</select>
    
	<select id="getAssnTargetAttributesByUId"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
		remapResults="true" resultMap="associationTargetEntry">
		SELECT 
			entAssn.entityAssnsGuid,
			entAssn.associationPredicateGuid,
			entAssn.sourceEntityCode,
			entAssn.sourceEntityCodeNamespace,
			entAssn.targetEntityCode,
			entAssn.targetEntityCodeNamespace,
			entAssn.associationInstanceId,
			entAssn.isDefining,
			entAssn.isInferred,
			entAssn.isActive,
			entAssn.owner,
			entAssn.status,
			entAssn.effectiveDate,
			entAssn.expirationDate,
			entAssn.entryStateGuid,
			quals.entityAssnQualsGuid,
			quals.referenceGuid,
			quals.qualifierName,
			quals.qualifierValue,
			quals.entryStateGuid esGuid
		FROM
			$prefix$entityAssnsToEntity entAssn
		LEFT JOIN
			$prefix$entityAssnQuals quals
		ON
			entAssn.entityAssnsGuid = quals.referenceGuid
		WHERE
			entAssn.entityAssnsGuid = #param1# 
			
	</select>

	<update id="updateEntityAssnToEntityByUId"
		parameterClass="org.lexevs.dao.database.ibatis.association.parameter.InsertOrUpdateAssociationTargetBean">
		UPDATE
			$prefix$entityAssnsToEntity
		SET
		<dynamic prepend=" ">
			<isNotNull prepend="," property="associationSource.sourceEntityCode">
				sourceEntityCode = #associationSource.sourceEntityCode#
			</isNotNull>
			<isNotNull prepend="," property="associationSource.sourceEntityCodeNamespace">
				sourceEntityCodeNamespace = #associationSource.sourceEntityCodeNamespace#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.targetEntityCode">
				targetEntityCode = #associationTarget.targetEntityCode#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.targetEntityCodeNamespace">
				targetEntityCodeNamespace = #associationTarget.targetEntityCodeNamespace#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.isDefining">
				isDefining = #associationTarget.isDefining#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.isInferred">
				isInferred = #associationTarget.isInferred#
			</isNotNull>
			<isNotNull prepend="," property="entryStateUId">
				entryStateGuid = #entryStateUId#
			</isNotNull>
		</dynamic>
		WHERE
			entityAssnsGuid = #uid#
	</update>
	
	<update id="updateEntityAssnToEntityVerAttribByUId"
		parameterClass="org.lexevs.dao.database.ibatis.association.parameter.InsertOrUpdateAssociationTargetBean">
		UPDATE
			$prefix$entityAssnsToEntity
		SET
		<dynamic prepend=" ">
			<isNotNull prepend="," property="associationTarget.isActive">
				isActive =
				#associationTarget.isActive#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.owner">
				owner = #associationTarget.owner#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.status">
				status = #associationTarget.status#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.effectiveDate">
				effectiveDate =
				#associationTarget.effectiveDate#
			</isNotNull>
			<isNotNull prepend="," property="associationTarget.expirationDate">
				expirationDate =
				#associationTarget.expirationDate#
			</isNotNull>
			<isNotNull prepend="," property="entryStateUId">
				entryStateGuid = #entryStateUId#
			</isNotNull>
		</dynamic>
		WHERE
			entityAssnsGuid = #uid#
	</update>	
	
	<delete id="deleteAssocTargetByAssnUId" parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter">
		DELETE FROM
			$prefix$entityAssnsToEntity
		WHERE
			entityAssnsGuid = #param1#
	</delete>
	
	<select id="getAssociationTargetLatestRevisionIdByUId" remapResults="true"
		parameterClass="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter"
		resultClass="string">
		SELECT 
			rev.revisionId
		FROM
			$prefix$entityAssnsToEntity entAssnEnt,
			$prefix$entryState es,
			${defaultPrefix}revision rev
		WHERE
			entAssnEnt.entityAssnsGuid = #param1#	
		AND
			entAssnEnt.entryStateGuid = es.entryStateGuid	
		AND
			es.revisionGuid = rev.revisionGuid	
	</select> 
</sqlMap>