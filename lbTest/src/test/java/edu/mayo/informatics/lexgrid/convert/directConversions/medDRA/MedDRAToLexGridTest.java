package edu.mayo.informatics.lexgrid.convert.directConversions.medDRA;import static org.junit.Assert.assertEquals;import static org.junit.Assert.fail;import java.io.File;import org.LexGrid.LexBIG.DataModel.InterfaceElements.ProcessStatus;import org.LexGrid.LexBIG.Impl.loaders.MessageDirector;import org.LexGrid.LexBIG.Utility.logging.LgMessageDirectorIF;import org.LexGrid.codingSchemes.CodingScheme;import org.LexGrid.concepts.Entities;import org.LexGrid.relations.AssociationPredicate;import org.LexGrid.relations.AssociationSource;import org.LexGrid.relations.Relations;import org.junit.After;import org.junit.Before;import org.junit.Test;public class MedDRAToLexGridTest {	File accessPath = new File("resources/testData/medDRA");	CodingScheme codingScheme = null;	@Before	public void setUp() {		try {			MedDRA2LGMain loader = new MedDRA2LGMain();			LgMessageDirectorIF messages = 				new MessageDirector(this.getClass().getName(), new ProcessStatus());					codingScheme = new CodingScheme();			codingScheme = loader.map(accessPath.toURI(), messages);		}		catch (Exception e) {			fail("Unable to connect to the MedDRA Directory.");		}	}		@After	public void tearDown() {		codingScheme = null;	}		@Test	public void testRelations() {		Entities entities = codingScheme.getEntities();		Relations [] relations = codingScheme.getRelations();				System.out.println(entities.getEntityCount());		System.out.println(relations.length);		int count;		int sourceCount = 0;		int targetCount = 0;				for (AssociationPredicate ap : codingScheme.getRelations()[0].getAssociationPredicate()) {			sourceCount += ap.getSourceCount();			for (AssociationSource source : ap.getSource()) {				if (source.getSourceEntityCode().equals("10005329")){					count = source.getTargetCount();					assertEquals(17, count);				}			    targetCount += source.getTargetCount();			}		}								assertEquals(152, sourceCount);		assertEquals(1566, targetCount);	}}